import { create, diffProperty, invalidator } from '../core/vdom';
import injector from '../core/middleware/injector';
import icache from '../core/middleware/icache';
const factory = create({ icache, injector, diffProperty, invalidator }).properties();
export const Route = factory(function Route({ middleware: { icache, injector, diffProperty, invalidator }, properties }) {
    const { renderer, id, routerKey = 'router' } = properties();
    const currentHandle = icache.get('handle');
    if (!currentHandle) {
        const handle = injector.subscribe(routerKey);
        if (handle) {
            icache.set('handle', () => handle);
        }
    }
    diffProperty('routerKey', (current, next) => {
        const { routerKey: currentRouterKey = 'router' } = current;
        const { routerKey = 'router' } = next;
        if (routerKey !== currentRouterKey) {
            const currentHandle = icache.get('handle');
            if (currentHandle) {
                currentHandle();
            }
            const handle = injector.subscribe(routerKey);
            if (handle) {
                icache.set('handle', () => handle);
            }
        }
        invalidator();
    });
    const router = injector.get(routerKey);
    if (router) {
        const routeContext = router.getRoute(id);
        if (routeContext) {
            const { queryParams, params, type, isError, isExact } = routeContext;
            const result = renderer({ queryParams, params, type, isError, isExact, router });
            if (result) {
                return result;
            }
        }
    }
    return null;
});
export default Route;
//# sourceMappingURL=Route.mjs.map