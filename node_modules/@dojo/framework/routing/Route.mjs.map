{"version":3,"file":"Route.mjs","sourceRoot":"","sources":["Route.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AACjE,OAAO,QAAQ,MAAM,6BAA6B,CAAC;AACnD,OAAO,MAAM,MAAM,2BAA2B,CAAC;AAW/C,MAAM,OAAO,GAAG,MAAM,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,WAAW,EAAE,CAAC,CAAC,UAAU,EAAmB,CAAC;AAEtG,MAAM,CAAC,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,KAAK,CAAC,EAC3C,UAAU,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,WAAW,EAAE,EAC3D,UAAU,EACV;IACA,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAE,SAAS,GAAG,QAAQ,EAAE,GAAG,UAAU,EAAE,CAAC;IAC5D,MAAM,aAAa,GAAG,MAAM,CAAC,GAAG,CAAW,QAAQ,CAAC,CAAC;IACrD,IAAI,CAAC,aAAa,EAAE;QACnB,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAC7C,IAAI,MAAM,EAAE;YACX,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC;SACnC;KACD;IACD,YAAY,CAAC,WAAW,EAAE,CAAC,OAAwB,EAAE,IAAqB,EAAE,EAAE;QAC7E,MAAM,EAAE,SAAS,EAAE,gBAAgB,GAAG,QAAQ,EAAE,GAAG,OAAO,CAAC;QAC3D,MAAM,EAAE,SAAS,GAAG,QAAQ,EAAE,GAAG,IAAI,CAAC;QACtC,IAAI,SAAS,KAAK,gBAAgB,EAAE;YACnC,MAAM,aAAa,GAAG,MAAM,CAAC,GAAG,CAAW,QAAQ,CAAC,CAAC;YACrD,IAAI,aAAa,EAAE;gBAClB,aAAa,EAAE,CAAC;aAChB;YACD,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YAC7C,IAAI,MAAM,EAAE;gBACX,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC;aACnC;SACD;QACD,WAAW,EAAE,CAAC;IACf,CAAC,CAAC,CAAC;IACH,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAS,SAAS,CAAC,CAAC;IAE/C,IAAI,MAAM,EAAE;QACX,MAAM,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACzC,IAAI,YAAY,EAAE;YACjB,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,YAAY,CAAC;YACrE,MAAM,MAAM,GAAG,QAAQ,CAAC,EAAE,WAAW,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;YACjF,IAAI,MAAM,EAAE;gBACX,OAAO,MAAM,CAAC;aACd;SACD;KACD;IACD,OAAO,IAAI,CAAC;AACb,CAAC,CAAC,CAAC;AAEH,eAAe,KAAK,CAAC","sourcesContent":["import { create, diffProperty, invalidator } from '../core/vdom';\nimport injector from '../core/middleware/injector';\nimport icache from '../core/middleware/icache';\nimport { DNode } from '../core/interfaces';\nimport { MatchDetails } from './interfaces';\nimport Router from './Router';\n\nexport interface RouteProperties {\n\trenderer: (matchDetails: MatchDetails) => DNode | DNode[];\n\tid: string;\n\trouterKey?: string;\n}\n\nconst factory = create({ icache, injector, diffProperty, invalidator }).properties<RouteProperties>();\n\nexport const Route = factory(function Route({\n\tmiddleware: { icache, injector, diffProperty, invalidator },\n\tproperties\n}) {\n\tconst { renderer, id, routerKey = 'router' } = properties();\n\tconst currentHandle = icache.get<Function>('handle');\n\tif (!currentHandle) {\n\t\tconst handle = injector.subscribe(routerKey);\n\t\tif (handle) {\n\t\t\ticache.set('handle', () => handle);\n\t\t}\n\t}\n\tdiffProperty('routerKey', (current: RouteProperties, next: RouteProperties) => {\n\t\tconst { routerKey: currentRouterKey = 'router' } = current;\n\t\tconst { routerKey = 'router' } = next;\n\t\tif (routerKey !== currentRouterKey) {\n\t\t\tconst currentHandle = icache.get<Function>('handle');\n\t\t\tif (currentHandle) {\n\t\t\t\tcurrentHandle();\n\t\t\t}\n\t\t\tconst handle = injector.subscribe(routerKey);\n\t\t\tif (handle) {\n\t\t\t\ticache.set('handle', () => handle);\n\t\t\t}\n\t\t}\n\t\tinvalidator();\n\t});\n\tconst router = injector.get<Router>(routerKey);\n\n\tif (router) {\n\t\tconst routeContext = router.getRoute(id);\n\t\tif (routeContext) {\n\t\t\tconst { queryParams, params, type, isError, isExact } = routeContext;\n\t\t\tconst result = renderer({ queryParams, params, type, isError, isExact, router });\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n});\n\nexport default Route;\n"]}