(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../core/vdom", "../core/middleware/injector", "../core/middleware/icache"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var vdom_1 = require("../core/vdom");
    var injector_1 = require("../core/middleware/injector");
    var icache_1 = require("../core/middleware/icache");
    var ROUTER_KEY = 'router';
    var factory = vdom_1.create({ icache: icache_1.default, injector: injector_1.default, diffProperty: vdom_1.diffProperty, invalidator: vdom_1.invalidator })
        .properties()
        .children();
    exports.Outlet = factory(function Outlet(_a) {
        var _b = _a.middleware, icache = _b.icache, injector = _b.injector, diffProperty = _b.diffProperty, invalidator = _b.invalidator, properties = _a.properties, children = _a.children;
        diffProperty('routerKey', function (current, next) {
            var _a = current.routerKey, currentRouterKey = _a === void 0 ? ROUTER_KEY : _a;
            var _b = next.routerKey, routerKey = _b === void 0 ? ROUTER_KEY : _b;
            if (routerKey !== currentRouterKey) {
                var currentHandle_1 = icache.get('handle');
                if (currentHandle_1) {
                    currentHandle_1();
                }
                var handle_1 = injector.subscribe(routerKey);
                if (handle_1) {
                    icache.set('handle', function () { return handle_1; });
                }
            }
            invalidator();
        });
        var _c = properties(), id = _c.id, matcher = _c.matcher, _d = _c.routerKey, routerKey = _d === void 0 ? ROUTER_KEY : _d;
        var _e = tslib_1.__read(children(), 1), outletChildren = _e[0];
        var currentHandle = icache.get('handle');
        if (!currentHandle) {
            var handle_2 = injector.subscribe(routerKey);
            if (handle_2) {
                icache.set('handle', function () { return handle_2; });
            }
        }
        var router = injector.get(routerKey);
        if (router) {
            var currentRouteContext_1 = router.getMatchedRoute();
            var routeContextMap_1 = router.getOutlet(id);
            if (routeContextMap_1 && currentRouteContext_1) {
                if (typeof outletChildren === 'function') {
                    return outletChildren(tslib_1.__assign({}, currentRouteContext_1, { router: router }));
                }
                var matches_1 = Object.keys(outletChildren).reduce(function (matches, key) {
                    matches[key] = !!routeContextMap_1.get(key);
                    return matches;
                }, {});
                if (matcher) {
                    matches_1 = matcher(matches_1, routeContextMap_1);
                }
                return (vdom_1.tsx("virtual", null, Object.keys(matches_1)
                    .filter(function (key) { return matches_1[key]; })
                    .map(function (key) {
                    var renderer = outletChildren[key];
                    if (typeof renderer === 'function') {
                        var context = routeContextMap_1.get(key) || currentRouteContext_1;
                        return renderer(tslib_1.__assign({}, context, { router: router }));
                    }
                    return renderer;
                })));
            }
        }
        return null;
    });
    exports.default = exports.Outlet;
});
//# sourceMappingURL=Outlet.js.map