(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../shim/global", "../shim/WeakMap", "globalize/dist/globalize/message", "./util/cldr"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var global_1 = require("../shim/global");
    var WeakMap_1 = require("../shim/WeakMap");
    var Globalize = require("globalize/dist/globalize/message");
    var Cldr = require('cldrjs/dist/cldr');
    "!has('cldr-elide')";
    require("./util/cldr");
    /**
     * Ensure that the raw bundle is not mutated when
     * the resolved bundles are set
     */
    var cldrResolved = Cldr._resolved;
    Object.defineProperty(Cldr, '_resolved', {
        get: function () {
            return tslib_1.__assign({}, cldrResolved);
        },
        set: function (value) {
            cldrResolved = tslib_1.__assign({}, value);
        }
    });
    var TOKEN_PATTERN = /\{([a-z0-9_]+)\}/gi;
    var bundleIdMap = new WeakMap_1.default();
    var bundleLoaderMap = new WeakMap_1.default();
    var idToBundleLoaderMap = new Map();
    var globalizeInstanceMap = new Map();
    var MESSAGE_BUNDLE_PATH = 'globalize-messages/{bundle}';
    var DOJO_PATH = 'dojo/{bundle}/lookup';
    var supportedLocales = [];
    var defaultLocale = '';
    // Set to `unknown` to support using default message bundles
    // without an application locale configured
    var computedLocale = 'unknown';
    var currentLocale;
    var cldrLoaders = {};
    var bundleId = 0;
    var cldr = new Cldr('');
    /**
     * Sets the array of supported locales for the application
     */
    function setSupportedLocales(locales) {
        supportedLocales = locales;
    }
    exports.setSupportedLocales = setSupportedLocales;
    /**
     * Sets the default locale of the application.
     */
    function setDefaultLocale(locale) {
        defaultLocale = locale;
    }
    exports.setDefaultLocale = setDefaultLocale;
    /**
     * Returns the users locale computed by using the system locale
     * of the environment and the default locale.
     *
     * The users system locale if supported by the application (i.e resolves
     * to one of the set supported locales) otherwise the registered default
     * locale.
     */
    function getComputedLocale() {
        return computedLocale;
    }
    exports.getComputedLocale = getComputedLocale;
    /**
     * Returns the application's current locale
     */
    function getCurrentLocale() {
        return currentLocale;
    }
    exports.getCurrentLocale = getCurrentLocale;
    /**
     * Sets the available cldr loaders for the i18n module
     */
    function setCldrLoaders(loaders) {
        cldrLoaders = tslib_1.__assign({}, loaders);
    }
    exports.setCldrLoaders = setCldrLoaders;
    /**
     * Returns the matching supported locale for the passed locale. If there
     * is no matching locale then undefined is returned
     */
    function getMatchedSupportedLocale(locale) {
        var partialLocale = locale.replace(/^([a-z]{2}).*/i, '$1');
        var matchedLocale;
        for (var i = 0; i < supportedLocales.length; i++) {
            var supportedLocale = supportedLocales[i];
            if (locale === supportedLocale) {
                matchedLocale = locale;
                break;
            }
            if (partialLocale === supportedLocale) {
                matchedLocale = partialLocale;
            }
        }
        return matchedLocale;
    }
    exports.getMatchedSupportedLocale = getMatchedSupportedLocale;
    /**
     * Determines if the fallback CLDR data needs to be loaded
     * for the locale
     */
    function shouldLoadFallbackCldr(locale) {
        return !getMatchedSupportedLocale(locale) && cldrLoaders.fallback && cldrLoaders.fallback !== true;
    }
    /**
     * Sets the i18n modules locale state based on whether the locale
     * is the default or local
     */
    function setI18nLocales(locale, isDefault, local) {
        if (isDefault) {
            Globalize.locale(locale);
            computedLocale = locale;
            currentLocale = locale;
        }
        else if (!local) {
            currentLocale = locale;
        }
    }
    /**
     * Load required CLDR data based on the registered loaders and support
     * for the requested locale
     */
    function loadCldrData(loaderPromises, userLocale, requestedLocale, calculatedLocale, isDefault, isLocal, invalidator) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, Promise.all(loaderPromises).then(function (loaderData) {
                        var _a, _b;
                        cldrLoaders[userLocale] = true;
                        cldrLoaders.supplemental = true;
                        loaderData.forEach(function (results) {
                            results.forEach(function (result) {
                                Globalize.load(result.default);
                            });
                        });
                        if (shouldLoadFallbackCldr(requestedLocale)) {
                            cldrLoaders.fallback = true;
                            var data = cldr.get('dojo') || {};
                            var locales = Object.keys(data);
                            for (var i = 0; i < locales.length; i++) {
                                var locale = locales[i];
                                if (data[locale].bundles) {
                                    Globalize.loadMessages((_a = {}, _a[locale] = data[locale].bundles, _a));
                                }
                            }
                            if (requestedLocale && locales.indexOf(requestedLocale) === -1) {
                                Globalize.loadMessages((_b = {}, _b[requestedLocale] = {}, _b));
                            }
                        }
                        setI18nLocales(calculatedLocale, isDefault, isLocal);
                        invalidator && invalidator();
                        return calculatedLocale;
                    })];
            });
        });
    }
    /**
     * Sets the i18n locale information for the application, loading any CLDR data or NLS
     * messages required to support the change.
     */
    function setLocale(options) {
        var _a;
        if (options === void 0) { options = {}; }
        var _b = options.local, isLocal = _b === void 0 ? false : _b, _c = options.default, isDefault = _c === void 0 ? false : _c, _d = options.locale, requestedLocale = _d === void 0 ? global_1.default.navigator.language || global_1.default.navigator.userLanguage : _d, invalidator = options.invalidator;
        var matchedLocale = getMatchedSupportedLocale(requestedLocale);
        var userLocale = matchedLocale || defaultLocale;
        var calculatedLocale = matchedLocale ? requestedLocale : defaultLocale;
        var loaderPromises = [];
        var supplementalLoader = cldrLoaders.supplemental;
        var fallbackLoader = cldrLoaders.fallback;
        if (supplementalLoader && supplementalLoader !== true) {
            loaderPromises.push(supplementalLoader());
        }
        var localeCldrLoader = cldrLoaders[userLocale];
        if (localeCldrLoader && localeCldrLoader !== true) {
            loaderPromises.push(localeCldrLoader());
        }
        var loadFallback = !matchedLocale && fallbackLoader && fallbackLoader !== true;
        if (loadFallback && fallbackLoader && fallbackLoader !== true) {
            loaderPromises.push(fallbackLoader());
        }
        if (loaderPromises.length) {
            return loadCldrData(loaderPromises, userLocale, requestedLocale, calculatedLocale, isDefault, isLocal, invalidator);
        }
        else if (!matchedLocale) {
            Globalize.loadMessages((_a = {}, _a[requestedLocale] = {}, _a));
        }
        setI18nLocales(calculatedLocale, isDefault, isLocal);
        return calculatedLocale;
    }
    exports.setLocale = setLocale;
    function getPlaceholderBundle(bundle) {
        return {
            messages: Object.keys(bundle.messages).reduce(function (messages, key) {
                messages[key] = '';
                return messages;
            }, {}),
            isPlaceholder: true,
            format: function () { return ''; }
        };
    }
    function getBundleId() {
        return "id-" + ++bundleId;
    }
    function markBundleAsLoaded(locale, bundleId) {
        var _a, _b;
        Cldr.load({
            dojo: (_a = {},
                _a[locale] = {
                    lookup: (_b = {},
                        _b[bundleId] = {
                            locale: undefined,
                            id: undefined,
                            loading: undefined
                        },
                        _b)
                },
                _a)
        });
    }
    /**
     * Registers all locale loaders for the bundle
     */
    function registerBundle(bundle) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var _j = bundle.locales, localeBundleLoaders = _j === void 0 ? {} : _j;
        var locales = Object.keys(localeBundleLoaders);
        var bundleId = bundleIdMap.get(bundle);
        if (!bundleId) {
            bundleId = getBundleId();
            bundleIdMap.set(bundle, bundleId);
            var messageBundles = {};
            var lookup = {};
            for (var i = 0; i < locales.length; i++) {
                var locale = locales[i];
                var isSupportedLocale = !!getMatchedSupportedLocale(locale);
                var bundleLoader = localeBundleLoaders[locale];
                var messages = {};
                if (typeof bundleLoader === 'function') {
                    var id = getBundleId();
                    bundleLoaderMap.set(bundleLoader, id);
                    idToBundleLoaderMap.set(id, bundleLoader);
                    lookup[locale] = { lookup: (_a = {}, _a[bundleId] = { locale: locale, id: id }, _a) };
                }
                else {
                    messages = bundleLoader;
                }
                if (isSupportedLocale) {
                    messageBundles[locale] = (_b = {},
                        _b[bundleId] = messages,
                        _b);
                }
                else if (lookup[locale]) {
                    lookup[locale].bundles = (_c = {}, _c[bundleId] = messages, _c);
                }
                else {
                    lookup[locale] = {
                        bundles: (_d = {}, _d[bundleId] = messages, _d)
                    };
                }
            }
            Globalize.loadMessages(tslib_1.__assign((_e = { root: (_f = {}, _f[bundleId] = bundle.messages, _f) }, _e[computedLocale] = (_g = {}, _g[bundleId] = bundle.messages, _g), _e[defaultLocale] = (_h = {}, _h[bundleId] = bundle.messages, _h), _e), messageBundles));
            Cldr.load({ dojo: lookup });
        }
        return bundleId;
    }
    var cachedBundleMap = new WeakMap_1.default();
    function localizeBundle(bundle, options) {
        var _a, _b;
        var _c = options.locale, locale = _c === void 0 ? computedLocale : _c, invalidator = options.invalidator;
        if (computedLocale === 'unknown') {
            return {
                messages: bundle.messages,
                isPlaceholder: false,
                format: function (key, options) {
                    return bundle.messages[key].replace(TOKEN_PATTERN, function (token, property) {
                        var value = options[property];
                        if (typeof value === 'undefined') {
                            return token;
                        }
                        return value;
                    });
                }
            };
        }
        if (shouldLoadFallbackCldr(locale)) {
            setLocale({ default: false, local: true, locale: locale, invalidator: invalidator });
            return getPlaceholderBundle(bundle);
        }
        var bundleId = registerBundle(bundle);
        var globalize = globalizeInstanceMap.get(locale) || new Globalize(new Cldr(locale));
        globalizeInstanceMap.set(locale, globalize);
        var lookupId = globalize.cldr.get(DOJO_PATH + "/" + bundleId + "/id");
        var lookupLocale = globalize.cldr.get(DOJO_PATH + "/" + bundleId + "/locale");
        if (lookupId && lookupLocale) {
            var bundleLoader = idToBundleLoaderMap.get(lookupId);
            if (bundleLoader) {
                Cldr.load({
                    dojo: (_a = {},
                        _a[lookupLocale] = { lookup: (_b = {}, _b[bundleId] = { loading: true }, _b) },
                        _a)
                });
                var loaderPromise = bundleLoader();
                loaderPromise.then(function (messages) {
                    var _a, _b;
                    markBundleAsLoaded(lookupLocale, bundleId);
                    Globalize.loadMessages((_a = {}, _a[lookupLocale] = (_b = {}, _b[bundleId] = messages.default, _b), _a));
                    invalidator();
                });
            }
        }
        var lookupLoading = globalize.cldr.get(DOJO_PATH + "/" + bundleId + "/loading");
        if (lookupLoading) {
            return getPlaceholderBundle(bundle);
        }
        var cachedLocaleMessagesMap = cachedBundleMap.get(bundle) || new Map();
        var localizedBundleMessages = cachedLocaleMessagesMap.get(locale);
        if (!localizedBundleMessages) {
            localizedBundleMessages = {
                messages: Object.keys(bundle.messages).reduce(function (messages, key) {
                    var message = globalize.cldr.get(MESSAGE_BUNDLE_PATH + "/" + bundleId + "/" + key);
                    messages[key] = message;
                    return messages;
                }, {}),
                isPlaceholder: false,
                format: function (key, options) {
                    return globalize.formatMessage(bundleId + "/" + key, options);
                }
            };
            cachedLocaleMessagesMap.set(locale, localizedBundleMessages);
            cachedBundleMap.set(bundle, cachedLocaleMessagesMap);
        }
        return localizedBundleMessages;
    }
    exports.localizeBundle = localizeBundle;
});
//# sourceMappingURL=i18n.js.map