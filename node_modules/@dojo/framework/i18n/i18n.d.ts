import './util/cldr';
export interface Messages {
    [key: string]: string;
}
export interface MessageLoader {
    (): Promise<{
        default: Messages;
    }>;
}
export interface CldrLoader {
    (): Promise<{
        default: any;
    }[]>;
}
export interface LocaleLoaders {
    [index: string]: Messages | MessageLoader;
}
export interface CldrLoaders {
    [index: string]: CldrLoader | true;
}
export interface Bundle<T extends Messages> {
    readonly locales?: LocaleLoaders;
    readonly messages: T;
}
export interface LocalizeOptions {
    locale?: string;
    useDefault?: boolean;
    invalidator: any;
}
export interface LocalizeResult<T extends Bundle<any>> {
    messages: T['messages'];
    isPlaceholder: boolean;
    format: (key: keyof T['messages'], options: any) => string;
}
interface SetLocaleOptions {
    locale?: string;
    default?: boolean;
    local?: boolean;
    invalidator?: () => void;
}
/**
 * Sets the array of supported locales for the application
 */
export declare function setSupportedLocales(locales: string[]): void;
/**
 * Sets the default locale of the application.
 */
export declare function setDefaultLocale(locale: string): void;
/**
 * Returns the users locale computed by using the system locale
 * of the environment and the default locale.
 *
 * The users system locale if supported by the application (i.e resolves
 * to one of the set supported locales) otherwise the registered default
 * locale.
 */
export declare function getComputedLocale(): string;
/**
 * Returns the application's current locale
 */
export declare function getCurrentLocale(): string | undefined;
/**
 * Sets the available cldr loaders for the i18n module
 */
export declare function setCldrLoaders(loaders: CldrLoaders): void;
/**
 * Returns the matching supported locale for the passed locale. If there
 * is no matching locale then undefined is returned
 */
export declare function getMatchedSupportedLocale(locale: string): string | undefined;
/**
 * Sets the i18n locale information for the application, loading any CLDR data or NLS
 * messages required to support the change.
 */
export declare function setLocale(options?: SetLocaleOptions): Promise<string> | string;
export declare function localizeBundle<T extends Messages>(bundle: Bundle<T>, options: LocalizeOptions): LocalizeResult<Bundle<T>>;
export {};
