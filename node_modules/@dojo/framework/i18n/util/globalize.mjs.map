{"version":3,"file":"globalize.mjs","sourceRoot":"","sources":["globalize.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,SAAS,MAAM,0BAA0B,CAAC;AACtD,OAAO,EAAE,iBAAiB,EAAE,yBAAyB,EAAE,MAAM,SAAS,CAAC;AAEvE;;;;;;;;;;GAUG;AACH,SAAS,2BAA2B,CAAO,IAA2D;IACrG,IAAI,EAAE,MAAM,EAAE,eAAe,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,IAAuC,CAAC;IACvF,IAAI,OAAO,GAAG,eAAe,CAAC;IAE9B,IAAI,OAAO,eAAe,KAAK,QAAQ,EAAE;QACxC,MAAM,GAAG,eAAe,CAAC;QACzB,OAAO,GAAG,SAAS,CAAC;KACpB;IAED,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;AACzC,CAAC;AA0BD,MAAM,UAAU,kBAAkB,CACjC,MAAc,EACd,IAA2D;IAE3D,MAAM,EAAE,MAAM,EAAE,eAAe,GAAG,iBAAiB,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,2BAA2B,CAC1G,IAAI,CACJ,CAAC;IACF,MAAM,MAAM,GAAG,yBAAyB,CAAC,eAAe,CAAC,IAAI,iBAAiB,EAAE,CAAC;IACjF,MAAM,UAAU,GAAU,OAAO,KAAK,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAEtE,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;QAChC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACtB;IAED,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;QACnC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACzB;IACD,MAAM,SAAS,GAAG,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC;IACxC,OAAQ,SAAiB,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AAChE,CAAC","sourcesContent":["import * as Globalize from 'globalize/dist/globalize';\nimport { getComputedLocale, getMatchedSupportedLocale } from '../i18n';\n\n/**\n * @private\n * Normalize an array of formatter arguments into a discrete object with `locale`, `options`, `value` and\n * `unit` properties for use with the various Globalize.js formatter methods.\n *\n * @param args\n * An object with an optional locale, options, value, and/or unit.\n *\n * @return\n * The normalized object map.\n */\nfunction normalizeFormatterArguments<T, O>(args: DelegatorOptions<T> | FormatterDelegatorOptions<T, O>) {\n\tlet { locale, optionsOrLocale, unit, value } = args as FormatterDelegatorOptions<T, O>;\n\tlet options = optionsOrLocale;\n\n\tif (typeof optionsOrLocale === 'string') {\n\t\tlocale = optionsOrLocale;\n\t\toptions = undefined;\n\t}\n\n\treturn { locale, options, unit, value };\n}\n\nexport interface DelegatorOptions<O> {\n\tlocale?: string;\n\toptionsOrLocale?: O | string;\n}\n\nexport interface FormatterDelegatorOptions<T, O> extends DelegatorOptions<O> {\n\tunit?: string;\n\tvalue?: T;\n}\n\n/**\n * Call the specified Globalize.js method with the specified value, unit, and options, for the specified locale.\n *\n * @param method\n * The name of the static method on the `Globalize` object (required).\n *\n * @param args\n * An object containing any locale, options, value, or unit required by the underlying Globalize.js method.\n *\n * @return\n * The value returned by the underlying Globalize.js method.\n */\nexport function globalizeDelegator<O, R>(method: string, args: DelegatorOptions<O>): R;\nexport function globalizeDelegator<T, O, R>(method: string, args: FormatterDelegatorOptions<T, O>): R;\nexport function globalizeDelegator<T, O, R>(\n\tmethod: string,\n\targs: DelegatorOptions<O> | FormatterDelegatorOptions<T, O>\n): R {\n\tconst { locale: requestedLocale = getComputedLocale(), options, value, unit } = normalizeFormatterArguments<T, O>(\n\t\targs\n\t);\n\tconst locale = getMatchedSupportedLocale(requestedLocale) || getComputedLocale();\n\tconst methodArgs: any[] = typeof value !== 'undefined' ? [value] : [];\n\n\tif (typeof unit !== 'undefined') {\n\t\tmethodArgs.push(unit);\n\t}\n\n\tif (typeof options !== 'undefined') {\n\t\tmethodArgs.push(options);\n\t}\n\tconst globalize = new Globalize(locale);\n\treturn (globalize as any)[method].apply(globalize, methodArgs);\n}\n"]}