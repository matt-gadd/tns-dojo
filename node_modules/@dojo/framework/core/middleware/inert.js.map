{"version":3,"file":"inert.js","sourceRoot":"","sources":["inert.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,gCAAgD;IAChD,0CAAqD;IACrD,sCAAiC;IACjC,4BAA0B;IAE1B,IAAM,OAAO,GAAG,aAAM,CAAC,EAAE,IAAI,aAAA,EAAE,OAAO,gBAAA,EAAE,CAAC,CAAC;IAE7B,QAAA,KAAK,GAAG,OAAO,CAAC,UAAC,EAAiC;YAA/B,kBAA6B,EAAf,cAAI,EAAE,oBAAO;QAC1D,IAAM,oBAAoB,GAAG,IAAI,aAAG,EAA0B,CAAC;QAC/D,OAAO,CAAC;YACP,oBAAoB,CAAC,OAAO,CAAC,UAAC,KAAK;gBAClC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;oBAClB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACpB,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YACH,oBAAoB,CAAC,KAAK,EAAE,CAAC;QAC9B,CAAC,CAAC,CAAC;QACH,OAAO;YACN,GAAG,EAAH,UAAI,GAAoB,EAAE,MAAe,EAAE,MAAuB;gBAAvB,uBAAA,EAAA,cAAuB;gBACjE,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAQ,CAAC;gBACrC,IAAI,CAAC,OAAO,EAAE;oBACb,OAAO;iBACP;gBAED,IAAI,MAAM,EAAE;oBACX,IAAM,UAAU,GAAG,oBAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;oBACvD,IAAI,MAAM,EAAE;wBACX,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;wBACtB,IAAI,OAAO,CAAC,UAAU,EAAE;4BACvB,IAAM,QAAQ,GAAG,YAAS,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAU,CAAC;4BACjE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gCACzC,IAAI,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;oCACtE,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;oCACzB,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;iCAC7B;6BACD;yBACD;wBACD,oBAAoB,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;qBAC1C;yBAAM;wBACN,IAAI,UAAU,CAAC,MAAM,EAAE;4BACtB,UAAU,CAAC,OAAO,CAAC,UAAC,IAAI;gCACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;4BACpB,CAAC,CAAC,CAAC;4BACH,oBAAoB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;yBACjC;qBACD;iBACD;qBAAM;oBACN,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC;iBACvB;YACF,CAAC;SACD,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,kBAAe,aAAK,CAAC","sourcesContent":["import { create, node, destroy } from '../vdom';\nimport { from as arrayFrom } from '../../shim/array';\nimport Map from '../../shim/Map';\nimport '../../shim/inert';\n\nconst factory = create({ node, destroy });\n\nexport const inert = factory(({ middleware: { node, destroy } }) => {\n\tconst inertInvertedNodeMap = new Map<string | number, any[]>();\n\tdestroy(() => {\n\t\tinertInvertedNodeMap.forEach((nodes) => {\n\t\t\tnodes.forEach((node) => {\n\t\t\t\tnode.inert = false;\n\t\t\t});\n\t\t});\n\t\tinertInvertedNodeMap.clear();\n\t});\n\treturn {\n\t\tset(key: string | number, enable: boolean, invert: boolean = false): void {\n\t\t\tconst domNode = node.get(key) as any;\n\t\t\tif (!domNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (invert) {\n\t\t\t\tconst inertNodes = inertInvertedNodeMap.get(key) || [];\n\t\t\t\tif (enable) {\n\t\t\t\t\tdomNode.inert = false;\n\t\t\t\t\tif (domNode.parentNode) {\n\t\t\t\t\t\tconst children = arrayFrom(domNode.parentNode.children) as any[];\n\t\t\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\t\t\tif (domNode !== children[i] && inertNodes.indexOf(children[i]) === -1) {\n\t\t\t\t\t\t\t\tchildren[i].inert = true;\n\t\t\t\t\t\t\t\tinertNodes.push(children[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tinertInvertedNodeMap.set(key, inertNodes);\n\t\t\t\t} else {\n\t\t\t\t\tif (inertNodes.length) {\n\t\t\t\t\t\tinertNodes.forEach((node) => {\n\t\t\t\t\t\t\tnode.inert = false;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tinertInvertedNodeMap.delete(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdomNode.inert = enable;\n\t\t\t}\n\t\t}\n\t};\n});\n\nexport default inert;\n"]}