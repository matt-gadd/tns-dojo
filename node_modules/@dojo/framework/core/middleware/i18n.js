(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../i18n/i18n", "../vdom", "./injector", "../../shim/Promise", "../I18nInjector", "../I18nInjector"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var i18n_1 = require("../../i18n/i18n");
    var vdom_1 = require("../vdom");
    var injector_1 = require("./injector");
    var Promise_1 = require("../../shim/Promise");
    var I18nInjector_1 = require("../I18nInjector");
    var I18nInjector_2 = require("../I18nInjector");
    exports.INJECTOR_KEY = I18nInjector_2.INJECTOR_KEY;
    exports.registerI18nInjector = I18nInjector_2.registerI18nInjector;
    var factory = vdom_1.create({ invalidator: vdom_1.invalidator, injector: injector_1.default, getRegistry: vdom_1.getRegistry, diffProperty: vdom_1.diffProperty }).properties();
    exports.i18n = factory(function (_a) {
        var properties = _a.properties, _b = _a.middleware, invalidator = _b.invalidator, injector = _b.injector, getRegistry = _b.getRegistry, diffProperty = _b.diffProperty;
        var i18nInjector = injector.get(I18nInjector_1.INJECTOR_KEY);
        if (!i18nInjector) {
            var registry = getRegistry();
            if (registry) {
                I18nInjector_1.registerI18nInjector({}, registry.base);
            }
        }
        diffProperty('locale', properties, function (current, next) {
            var localeDataInjector = injector.get(I18nInjector_1.INJECTOR_KEY);
            var injectedLocale;
            if (localeDataInjector) {
                var injectLocaleData = localeDataInjector.get();
                if (injectLocaleData) {
                    injectedLocale = injectLocaleData.locale;
                }
            }
            if (next.locale && current.locale !== next.locale) {
                var result = i18n_1.setLocale({ locale: next.locale, local: true });
                if (Promise_1.isThenable(result)) {
                    result.then(function () {
                        invalidator();
                    });
                    return current.locale || injectedLocale || i18n_1.getCurrentLocale();
                }
            }
            if (current.locale !== next.locale) {
                invalidator();
            }
            return next.locale || injectedLocale || i18n_1.getCurrentLocale();
        });
        injector.subscribe(I18nInjector_1.INJECTOR_KEY);
        return {
            localize: function (bundle) {
                var _a = properties(), locale = _a.locale, i18nBundle = _a.i18nBundle;
                if (i18nBundle) {
                    if (i18nBundle instanceof Map) {
                        bundle = i18nBundle.get(bundle) || bundle;
                    }
                    else {
                        bundle = i18nBundle;
                    }
                }
                return i18n_1.localizeBundle(bundle, { locale: locale, invalidator: invalidator });
            },
            set: function (localeData) {
                if (localeData === void 0) { localeData = {}; }
                var localeDataInjector = injector.get(I18nInjector_1.INJECTOR_KEY);
                if (localeDataInjector) {
                    localeDataInjector.set(localeData);
                }
            },
            get: function () {
                var localeDataInjector = injector.get(I18nInjector_1.INJECTOR_KEY);
                if (localeDataInjector) {
                    return localeDataInjector.get();
                }
            }
        };
    });
    exports.default = exports.i18n;
});
//# sourceMappingURL=i18n.js.map