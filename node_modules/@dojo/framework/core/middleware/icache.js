(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../shim/Map", "../vdom"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /* tslint:disable:interface-name */
    var Map_1 = require("../../shim/Map");
    var vdom_1 = require("../vdom");
    var factory = vdom_1.create({ invalidator: vdom_1.invalidator, destroy: vdom_1.destroy });
    var icacheFactory = factory(function (_a) {
        var _b = _a.middleware, invalidator = _b.invalidator, destroy = _b.destroy;
        var cacheMap = new Map_1.default();
        destroy(function () {
            cacheMap.clear();
        });
        var api = {
            get: function (key) {
                var cachedValue = cacheMap.get(key);
                if (!cachedValue || cachedValue.status === 'pending') {
                    return undefined;
                }
                return cachedValue.value;
            }
        };
        api.set = function (key, value, invalidate) {
            if (invalidate === void 0) { invalidate = true; }
            var current = api.get(key);
            if (typeof value === 'function') {
                value = value(current);
                if (value && typeof value.then === 'function') {
                    cacheMap.set(key, {
                        status: 'pending',
                        value: value
                    });
                    value.then(function (result) {
                        var cachedValue = cacheMap.get(key);
                        if (cachedValue && cachedValue.value === value) {
                            cacheMap.set(key, {
                                status: 'resolved',
                                value: result
                            });
                            invalidate && invalidator();
                        }
                    });
                    return undefined;
                }
            }
            cacheMap.set(key, {
                status: 'resolved',
                value: value
            });
            invalidate && invalidator();
            return value;
        };
        api.has = function (key) {
            return cacheMap.has(key);
        };
        api.delete = function (key, invalidate) {
            if (invalidate === void 0) { invalidate = true; }
            cacheMap.delete(key);
            invalidate && invalidator();
        };
        api.clear = function (invalidate) {
            if (invalidate === void 0) { invalidate = true; }
            cacheMap.clear();
            invalidate && invalidator();
        };
        api.getOrSet = function (key, value, invalidate) {
            if (invalidate === void 0) { invalidate = true; }
            var cachedValue = cacheMap.get(key);
            if (!cachedValue) {
                api.set(key, value, invalidate);
            }
            cachedValue = cacheMap.get(key);
            if (!cachedValue || cachedValue.status === 'pending') {
                return undefined;
            }
            return cachedValue.value;
        };
        return api;
    });
    exports.createICacheMiddleware = function () { return icacheFactory.withType(); };
    exports.icache = exports.createICacheMiddleware();
    exports.default = exports.icache;
});
//# sourceMappingURL=icache.js.map