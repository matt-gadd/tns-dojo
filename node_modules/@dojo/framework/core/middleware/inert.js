(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../vdom", "../../shim/array", "../../shim/Map", "../../shim/inert"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var vdom_1 = require("../vdom");
    var array_1 = require("../../shim/array");
    var Map_1 = require("../../shim/Map");
    require("../../shim/inert");
    var factory = vdom_1.create({ node: vdom_1.node, destroy: vdom_1.destroy });
    exports.inert = factory(function (_a) {
        var _b = _a.middleware, node = _b.node, destroy = _b.destroy;
        var inertInvertedNodeMap = new Map_1.default();
        destroy(function () {
            inertInvertedNodeMap.forEach(function (nodes) {
                nodes.forEach(function (node) {
                    node.inert = false;
                });
            });
            inertInvertedNodeMap.clear();
        });
        return {
            set: function (key, enable, invert) {
                if (invert === void 0) { invert = false; }
                var domNode = node.get(key);
                if (!domNode) {
                    return;
                }
                if (invert) {
                    var inertNodes = inertInvertedNodeMap.get(key) || [];
                    if (enable) {
                        domNode.inert = false;
                        if (domNode.parentNode) {
                            var children = array_1.from(domNode.parentNode.children);
                            for (var i = 0; i < children.length; i++) {
                                if (domNode !== children[i] && inertNodes.indexOf(children[i]) === -1) {
                                    children[i].inert = true;
                                    inertNodes.push(children[i]);
                                }
                            }
                        }
                        inertInvertedNodeMap.set(key, inertNodes);
                    }
                    else {
                        if (inertNodes.length) {
                            inertNodes.forEach(function (node) {
                                node.inert = false;
                            });
                            inertInvertedNodeMap.delete(key);
                        }
                    }
                }
                else {
                    domNode.inert = enable;
                }
            }
        };
    });
    exports.default = exports.inert;
});
//# sourceMappingURL=inert.js.map