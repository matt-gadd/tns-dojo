(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../../shim/global", "../../shim/object", "../vdom", "./icache"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var global_1 = require("../../shim/global");
    var object_1 = require("../../shim/object");
    var vdom_1 = require("../vdom");
    var icache_1 = require("./icache");
    function getDelta(start, current) {
        return {
            x: current.client.x - start.client.x,
            y: current.client.y - start.client.y
        };
    }
    function createNodeData() {
        return {
            dragResults: tslib_1.__assign({}, emptyResults),
            last: createPositionMatrix(),
            start: createPositionMatrix()
        };
    }
    function createPosition() {
        return { x: 0, y: 0 };
    }
    function createPositionMatrix() {
        return {
            client: { x: 0, y: 0 },
            offset: { x: 0, y: 0 },
            page: { x: 0, y: 0 },
            screen: { x: 0, y: 0 }
        };
    }
    function getPositionMatrix(event) {
        return {
            client: {
                x: event.clientX,
                y: event.clientY
            },
            offset: {
                x: event.offsetX,
                y: event.offsetY
            },
            page: {
                x: event.pageX,
                y: event.pageY
            },
            screen: {
                x: event.screenX,
                y: event.screenY
            }
        };
    }
    function initNode(node) {
        node.style.touchAction = 'none';
        node.setAttribute('touch-action', 'none');
    }
    var emptyResults = Object.freeze({
        delta: Object.freeze(createPosition()),
        isDragging: false
    });
    var factory = vdom_1.create({ destroy: vdom_1.destroy, icache: icache_1.default, invalidator: vdom_1.invalidator, node: vdom_1.node });
    exports.drag = factory(function (_a) {
        var _b = _a.middleware, destroy = _b.destroy, icache = _b.icache, invalidator = _b.invalidator, node = _b.node;
        var nodeMap = new WeakMap();
        function getData(target) {
            var state = nodeMap.get(target);
            if (state) {
                return { state: state, target: target };
            }
        }
        function onDragStart(event) {
            var dragging = icache.get('dragging');
            if (!event.isPrimary && dragging) {
                var state = nodeMap.get(dragging);
                state.dragResults.isDragging = false;
                icache.set('dragging', undefined);
                return;
            }
            if (event.button !== 0) {
                return;
            }
            var data = getData(event.target);
            if (data) {
                var state = data.state, target = data.target;
                icache.set('dragging', target);
                state.last = state.start = getPositionMatrix(event);
                state.dragResults.delta = createPosition();
                state.dragResults.start = tslib_1.__assign({}, state.start);
                state.dragResults.isDragging = true;
                invalidator();
                event.preventDefault();
                event.stopPropagation();
            }
        }
        function onDrag(event) {
            var dragging = icache.get('dragging');
            if (!dragging) {
                return;
            }
            // state cannot be unset, using ! operator
            var state = nodeMap.get(dragging);
            state.last = getPositionMatrix(event);
            state.dragResults.delta = getDelta(state.start, state.last);
            invalidator();
            event.preventDefault();
            event.stopPropagation();
        }
        function onDragStop(event) {
            var dragging = icache.get('dragging');
            if (!dragging) {
                return;
            }
            // state cannot be unset, using ! operator
            var state = nodeMap.get(dragging);
            state.last = getPositionMatrix(event);
            state.dragResults.delta = getDelta(state.start, state.last);
            state.dragResults.isDragging = false;
            icache.set('dragging', undefined);
            event.preventDefault();
            event.stopPropagation();
        }
        var win = global_1.default;
        win.addEventListener('pointerdown', onDragStart);
        win.addEventListener('pointermove', onDrag, true);
        win.addEventListener('pointerup', onDragStop, true);
        destroy(function () {
            var win = global_1.default;
            win.removeEventListener('pointerdown', onDragStart);
            win.removeEventListener('pointermove', onDrag, true);
            win.removeEventListener('pointerup', onDragStop, true);
            nodeMap = new WeakMap();
        });
        return {
            get: function (key) {
                var domNode = node.get(key);
                if (!domNode) {
                    return emptyResults;
                }
                if (!nodeMap.has(domNode)) {
                    nodeMap.set(domNode, createNodeData());
                    initNode(domNode);
                    return emptyResults;
                }
                var state = nodeMap.get(domNode);
                var dragResults = object_1.assign({}, state.dragResults);
                state.start = state.last;
                state.dragResults.delta = createPosition();
                delete state.dragResults.start;
                return dragResults;
            }
        };
    });
    exports.default = exports.drag;
});
//# sourceMappingURL=drag.js.map