import { FocusProperties } from '../interfaces';
export { FocusProperties } from '../interfaces';
export interface FocusState {
    current: number;
}
export declare const focus: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties & FocusProperties, import("../interfaces").DNode<any>[], {
    icache: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], {
        invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, () => void>;
        destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, (destroyFunction: () => void) => void>;
    }, import("./icache").ICacheResult<FocusState>>;
    diffProperty: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, {
        <T extends (...args: any) => any, K extends keyof ReturnType<T>>(property: K, properties: T, diff: (current: ReturnType<T>, next: ReturnType<T>) => void | ReturnType<T>[K]): void;
        (propertyName: string, diff: (current: any, next: any) => void): void;
    }>;
    node: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, {
        get(key: string | number): HTMLElement | null;
    }>;
    destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, (destroyFunction: () => void) => void>;
    invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, () => void>;
}, {
    shouldFocus(): boolean;
    focus(): void;
    isFocused(key: string | number): boolean;
}>;
export default focus;
