import { Invalidator } from '../interfaces';
declare type ResourceQuery<S> = {
    [P in keyof S]?: any;
};
declare type TransformConfig<T, S = void> = {
    [P in keyof T]: S extends void ? string : keyof S;
};
interface ResourceOptions<S> {
    page: number | number[];
    size: number;
    query: ResourceQuery<S>;
}
interface Options<S> {
    (options?: Partial<ResourceOptions<S>>): ResourceOptions<S>;
    options: any;
}
export interface ResourceFindOptions<S> {
    options: ResourceOptions<S>;
    query: ResourceQuery<S>;
    start: number;
    type?: string;
}
export interface ResourceInitOptions {
    id: string;
}
export interface ResourceReadRequest<RESOURCE> {
    offset: number;
    size: number;
    query: ResourceQuery<RESOURCE>;
}
export interface ResourceReadResponse<RESOURCE> {
    data: RESOURCE[];
    total: number;
}
export interface ResourceFindRequest<RESOURCE> {
    options: ResourceOptions<RESOURCE>;
    query: ResourceQuery<RESOURCE>;
    start: number;
    type: string;
}
export interface ResourceFindResponse<RESOURCE> {
    item: RESOURCE;
    index: number;
}
export interface ResourceFindResult<RESOURCE> {
    item: RESOURCE;
    page: number;
    index: number;
    pageIndex: number;
}
export interface ResourceMeta {
    total: number | undefined;
}
export interface ResourceGet<RESOURCE> {
    (request?: Partial<ResourceReadRequest<RESOURCE>>): ResourceReadResponse<RESOURCE>;
}
export interface ResourcePut<RESOURCE> {
    (readResponse: ResourceReadResponse<RESOURCE>, readRequest: ResourceReadRequest<RESOURCE>): void;
    (findResponse: ResourceFindResponse<RESOURCE> | undefined, findRequest: ResourceFindRequest<RESOURCE>): void;
}
export interface ResourceControls<RESOURCE> {
    get: ResourceGet<RESOURCE>;
    put: ResourcePut<RESOURCE>;
}
export interface ResourceRead<RESOURCE> {
    (request: ResourceReadRequest<RESOURCE>, controls: ResourceControls<RESOURCE>): void | Promise<void>;
}
export interface ResourceFind<RESOURCE> {
    (options: ResourceFindRequest<RESOURCE>, controls: ResourceControls<RESOURCE>): void | Promise<void>;
}
interface BaseResourceInitRequest {
    id: string;
}
export interface ResourceInit<RESOURCE, INIT> {
    (request: BaseResourceInitRequest & INIT, controls: ResourceControls<RESOURCE>): void;
}
interface ResourceTemplate<RESOURCE = {}, MIDDLEWARE = {}> {
    read: ResourceRead<RESOURCE>;
    find: ResourceFind<RESOURCE>;
}
interface ResourceTemplateWithInit<RESOURCE = {}, INIT = any, MIDDLEWARE = {}> {
    init: ResourceInit<RESOURCE, INIT>;
    read: ResourceRead<RESOURCE>;
    find: ResourceFind<RESOURCE>;
}
export interface Resource<S = {}> {
    find(options: ResourceFindOptions<S>): ResourceFindResult<S> | undefined;
    getOrRead(options: ResourceOptions<S>): (undefined | S[])[];
    meta(options: ResourceOptions<S>, read: boolean): ResourceMeta | undefined;
    isLoading(options: ResourceOptions<S> | ResourceFindOptions<S>): boolean;
    isFailed(options: ResourceOptions<S>): boolean;
    subscribeFind(invalidator: Invalidator, options: ResourceFindOptions<S>): void;
    subscribeRead(invalidator: Invalidator, options: ResourceOptions<S>): void;
    subscribeMeta(invalidator: Invalidator, options: ResourceOptions<S>): void;
    subscribeLoading(invalidator: Invalidator, options: ResourceOptions<S> | ResourceFindOptions<S>): void;
    subscribeFailed(invalidator: Invalidator, options: ResourceOptions<S> | ResourceFindOptions<S>): void;
    unsubscribe(invalidator: Invalidator): void;
    init(initOptions: ResourceInitOptions, requireDiff?: boolean): void;
    destroy(id: string): void;
}
export declare type ResourceProperty<MIDDLEWARE> = MIDDLEWARE extends infer RESOURCE ? {
    template: {
        template: ResourceTemplate<RESOURCE, MIDDLEWARE>;
        transform?: TransformConfig<MIDDLEWARE, any>;
        initOptions?: ResourceInitOptions;
        id?: string;
    };
    options?: Options<MIDDLEWARE>;
} : any;
export interface ResourceMiddlewareProperties<MIDDLEWARE> {
    resource: ResourceProperty<MIDDLEWARE>;
}
interface ResourceTemplateWrapper<RESOURCE = {}, MIDDLEWARE = {}> {
    template: ResourceTemplate<RESOURCE, any>;
    transform?: TransformConfig<{
        [P in keyof MIDDLEWARE]: {};
    }, RESOURCE>;
    initOptions?: ResourceInitOptions;
    id?: string;
}
interface ResourceMiddleware<MIDDLEWARE = {}> {
    <RESOURCE>(options: {
        template: ResourceTemplate<RESOURCE, MIDDLEWARE>;
        options?: Options<{}>;
    }): {
        template: {
            template: ResourceTemplate<RESOURCE, MIDDLEWARE>;
        };
        options: Options<{}>;
        transform?: any;
    };
    <RESOURCE, MIDDLEWARE>(options: {
        template: ResourceTemplate<RESOURCE, any>;
        transform: TransformConfig<MIDDLEWARE, RESOURCE>;
        options?: Options<{}>;
    }): {
        template: {
            template: ResourceTemplate<any, any>;
            transform: TransformConfig<MIDDLEWARE, RESOURCE>;
        };
        options: Options<{}>;
    };
    <RESOURCE, INIT, DATA extends RESOURCE>(options: {
        template: ResourceTemplateWithInit<RESOURCE, INIT, MIDDLEWARE>;
        initOptions: INIT & {
            id: string;
        };
        options?: Options<{}>;
    }): {
        template: {
            template: ResourceTemplateWithInit<RESOURCE, INIT, MIDDLEWARE>;
        };
        options: Options<{}>;
        transform?: any;
    };
    <RESOURCE, INIT, MIDDLEWARE, DATA extends RESOURCE>(options: {
        template: ResourceTemplateWithInit<RESOURCE, INIT, any>;
        transform: TransformConfig<MIDDLEWARE, RESOURCE>;
        initOptions: INIT & {
            id: string;
        };
        options?: Options<{}>;
    }): {
        template: {
            template: ResourceTemplateWithInit<any, INIT, any>;
            transform: TransformConfig<MIDDLEWARE, RESOURCE>;
        };
        options: Options<{}>;
    };
    <RESOURCE, MIDDLEWARE>(options: {
        template: ResourceTemplateWrapper<RESOURCE, MIDDLEWARE>;
        options: Options<{}>;
    }): {
        template: {
            template: ResourceTemplate<any, any>;
            transform: TransformConfig<MIDDLEWARE, RESOURCE>;
        };
        options: Options<{}>;
    };
    createOptions(id: string): Options<{}>;
    getOrRead<RESOURCE>(template: ResourceTemplate<RESOURCE> & {
        type: 'standard';
    }, options: ResourceOptions<any>): RESOURCE[][];
    getOrRead<RESOURCE, INIT>(template: ResourceTemplateWithInit<RESOURCE, INIT> & {
        type: 'init';
    }, options: ResourceOptions<any>, initOptions: INIT & {
        id: string;
    }): RESOURCE[][];
    getOrRead<T extends ResourceTemplate<any, any>>(template: {
        template: T;
        transform?: any;
        data?: any;
    }, options: ResourceOptions<any>): T extends ResourceTemplate<infer RESOURCE> ? RESOURCE[][] : void;
    find<RESOURCE>(template: ResourceTemplate<RESOURCE> & {
        type: 'standard';
    }, options: ResourceFindOptions<any>): ResourceFindResult<RESOURCE> | undefined;
    find<RESOURCE, INIT>(template: ResourceTemplateWithInit<RESOURCE, INIT> & {
        type: 'init';
    }, options: ResourceFindOptions<any>, initOptions: INIT & {
        id: string;
    }): ResourceFindResult<RESOURCE> | undefined;
    find<T extends ResourceTemplate<any, any>>(template: {
        template: T;
        transform?: any;
        data?: any;
    }, options: ResourceFindOptions<any>): T extends ResourceTemplate<infer RESOURCE> ? ResourceFindResult<RESOURCE> | undefined : void;
    meta<RESOURCE>(template: ResourceTemplate<RESOURCE> & {
        type: 'standard';
    }, options: ResourceOptions<any>, request?: boolean): ResourceMeta | undefined;
    meta<RESOURCE, INIT>(template: ResourceTemplateWithInit<RESOURCE, INIT> & {
        type: 'init';
    }, options: ResourceOptions<any>, initOptions: INIT & {
        id: string;
    }, request?: boolean): ResourceMeta | undefined;
    meta<T extends ResourceTemplate<any, any>>(template: {
        template: T;
        transform?: any;
        data?: any;
    }, options: ResourceOptions<any>, request?: boolean): ResourceMeta | undefined;
    isLoading<RESOURCE>(template: ResourceTemplate<RESOURCE> & {
        type: 'standard';
    }, options: ResourceOptions<any> | ResourceFindOptions<any>): boolean;
    isLoading<RESOURCE, INIT>(template: ResourceTemplateWithInit<RESOURCE, INIT> & {
        type: 'init';
    }, options: ResourceOptions<any> | ResourceFindOptions<any>, initOptions: INIT & {
        id: string;
    }): boolean;
    isLoading<T extends ResourceTemplate<any, any>>(template: {
        template: T;
        transform?: any;
        data?: any;
    }, options: ResourceOptions<any> | ResourceFindOptions<any>): boolean;
    isFailed<RESOURCE>(template: ResourceTemplate<RESOURCE> & {
        type: 'standard';
    }, options: ResourceOptions<any> | ResourceFindOptions<any>): boolean;
    isFailed<RESOURCE, INIT>(template: ResourceTemplateWithInit<RESOURCE, INIT> & {
        type: 'init';
    }, options: ResourceOptions<any> | ResourceFindOptions<any>, initOptions: INIT & {
        id: string;
    }): boolean;
    isFailed<T extends ResourceTemplate<any, any>>(template: {
        template: T;
        transform?: any;
        data?: any;
    }, options: ResourceOptions<any> | ResourceFindOptions<any>): boolean;
}
export declare function createResourceTemplate<RESOURCE = void>(template: ResourceTemplate<RESOURCE>): ResourceTemplate<RESOURCE> & {
    type: 'standard';
};
export declare function createResourceTemplateWithInit<RESOURCE = void, INIT = never>(template: ResourceTemplateWithInit<RESOURCE, INIT>): ResourceTemplateWithInit<RESOURCE, INIT> & {
    type: 'init';
};
export declare function createMemoryResourceTemplate<RESOURCE = void>(): ResourceTemplateWithInit<RESOURCE, {
    data: RESOURCE[];
}> & {
    type: 'init';
};
export declare function defaultFilter(query: ResourceQuery<any>, item: any, type?: string): boolean;
export declare function defaultFind(request: ResourceFindRequest<any>, { put, get }: ResourceControls<any>): void;
export declare const memoryTemplate: ResourceTemplateWithInit<any, {
    data: any;
}>;
export declare function createResourceMiddleware<MIDDLEWARE = void>(): import("../interfaces").MiddlewareResultFactory<MIDDLEWARE extends void ? {} : ResourceMiddlewareProperties<MIDDLEWARE>, import("../interfaces").DNode<any>[], {
    diffProperty: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, {
        <T extends (...args: any) => any, K extends keyof ReturnType<T>>(property: K, properties: T, diff: (current: ReturnType<T>, next: ReturnType<T>) => void | ReturnType<T>[K]): void;
        (propertyName: string, diff: (current: any, next: any) => void): void;
    }>;
    invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, () => void>;
    destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, (destroyFunction: () => void) => void>;
}, ResourceMiddleware<MIDDLEWARE>>;
export {};
