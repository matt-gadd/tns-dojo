(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../vdom", "./icache", "./injector", "../../shim/Set", "../diff", "../ThemeInjector"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var vdom_1 = require("../vdom");
    var icache_1 = require("./icache");
    var injector_1 = require("./injector");
    var Set_1 = require("../../shim/Set");
    var diff_1 = require("../diff");
    var ThemeInjector_1 = require("../ThemeInjector");
    exports.THEME_KEY = ' _key';
    exports.INJECTED_THEME_KEY = '__theme_injector';
    function registerThemeInjector(theme, themeRegistry) {
        var themeInjector = new ThemeInjector_1.ThemeInjector(theme);
        themeRegistry.defineInjector(exports.INJECTED_THEME_KEY, function (invalidator) {
            themeInjector.setInvalidator(invalidator);
            return function () { return themeInjector; };
        });
        return themeInjector;
    }
    var factory = vdom_1.create({ invalidator: vdom_1.invalidator, icache: icache_1.default, diffProperty: vdom_1.diffProperty, injector: injector_1.default, getRegistry: vdom_1.getRegistry }).properties();
    exports.theme = factory(function (_a) {
        var _b = _a.middleware, invalidator = _b.invalidator, icache = _b.icache, diffProperty = _b.diffProperty, injector = _b.injector, getRegistry = _b.getRegistry, properties = _a.properties;
        var themeKeys = new Set_1.default();
        diffProperty('theme', properties, function (current, next) {
            var changed = diff_1.auto(current.theme, next.theme, 3).changed;
            if (changed) {
                icache.clear();
                invalidator();
            }
        });
        diffProperty('classes', function (current, next) {
            var result = false;
            if ((current.classes && !next.classes) || (!current.classes && next.classes)) {
                result = true;
            }
            else if (current.classes && next.classes) {
                var keys = tslib_1.__spread(themeKeys.values());
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    result = diff_1.auto(current.classes[key], next.classes[key], 2).changed;
                    if (result) {
                        break;
                    }
                }
            }
            if (result) {
                icache.clear();
                invalidator();
            }
        });
        function getTheme() {
            var theme = properties().theme;
            if (theme) {
                return theme;
            }
            var themeInjector = injector.get(exports.INJECTED_THEME_KEY);
            if (themeInjector) {
                var themePayload = themeInjector.get();
                if (ThemeInjector_1.isThemeInjectorPayloadWithVariant(themePayload)) {
                    return { theme: themePayload.theme, variant: themePayload.variant };
                }
                else if (themePayload) {
                    return themePayload.theme;
                }
            }
        }
        var themeInjector = injector.get(exports.INJECTED_THEME_KEY);
        if (!themeInjector) {
            var registry = getRegistry();
            if (registry) {
                registerThemeInjector(undefined, registry.base);
            }
        }
        injector.subscribe(exports.INJECTED_THEME_KEY, function () {
            icache.clear();
            invalidator();
        });
        function set(theme, variant) {
            var currentTheme = injector.get(exports.INJECTED_THEME_KEY);
            if (currentTheme) {
                if (ThemeInjector_1.isThemeWithVariants(theme)) {
                    currentTheme.set(theme, variant);
                }
                else {
                    currentTheme.set(theme);
                }
            }
        }
        return {
            classes: function (css) {
                var cachedTheme = icache.get(css);
                if (cachedTheme) {
                    return cachedTheme;
                }
                var _a = exports.THEME_KEY, key = css[_a], classes = tslib_1.__rest(css, [typeof _a === "symbol" ? _a : _a + ""]);
                themeKeys.add(key);
                var theme = classes;
                var currentClasses = properties().classes;
                var currentTheme = getTheme();
                if (currentTheme && ThemeInjector_1.isThemeWithVariant(currentTheme)) {
                    currentTheme = ThemeInjector_1.isThemeWithVariants(currentTheme.theme)
                        ? currentTheme.theme.theme
                        : currentTheme.theme;
                }
                if (currentTheme && currentTheme[key]) {
                    theme = tslib_1.__assign({}, theme, currentTheme[key]);
                }
                if (currentClasses && currentClasses[key]) {
                    var classKeys = Object.keys(currentClasses[key]);
                    for (var i = 0; i < classKeys.length; i++) {
                        var classKey = classKeys[i];
                        if (theme[classKey]) {
                            theme[classKey] = theme[classKey] + " " + currentClasses[key][classKey].join(' ');
                        }
                    }
                }
                icache.set(css, theme, false);
                return theme;
            },
            variant: function () {
                var theme = getTheme();
                if (theme && ThemeInjector_1.isThemeWithVariant(theme)) {
                    return theme.variant.value.root;
                }
            },
            set: set,
            get: function () {
                var currentTheme = injector.get(exports.INJECTED_THEME_KEY);
                if (currentTheme) {
                    return currentTheme.get();
                }
            }
        };
    });
    exports.default = exports.theme;
});
//# sourceMappingURL=theme.js.map