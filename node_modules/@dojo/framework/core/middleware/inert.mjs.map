{"version":3,"file":"inert.mjs","sourceRoot":"","sources":["inert.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,SAAS,CAAC;AAChD,OAAO,EAAE,IAAI,IAAI,SAAS,EAAE,MAAM,kBAAkB,CAAC;AACrD,OAAO,GAAG,MAAM,gBAAgB,CAAC;AACjC,OAAO,kBAAkB,CAAC;AAE1B,MAAM,OAAO,GAAG,MAAM,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;AAE1C,MAAM,CAAC,MAAM,KAAK,GAAG,OAAO,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,EAAE;IAClE,MAAM,oBAAoB,GAAG,IAAI,GAAG,EAA0B,CAAC;IAC/D,OAAO,CAAC,GAAG,EAAE;QACZ,oBAAoB,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACtC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBACtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACpB,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,oBAAoB,CAAC,KAAK,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;IACH,OAAO;QACN,GAAG,CAAC,GAAoB,EAAE,MAAe,EAAE,SAAkB,KAAK;YACjE,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAQ,CAAC;YACrC,IAAI,CAAC,OAAO,EAAE;gBACb,OAAO;aACP;YAED,IAAI,MAAM,EAAE;gBACX,MAAM,UAAU,GAAG,oBAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;gBACvD,IAAI,MAAM,EAAE;oBACX,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;oBACtB,IAAI,OAAO,CAAC,UAAU,EAAE;wBACvB,MAAM,QAAQ,GAAG,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAU,CAAC;wBACjE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;4BACzC,IAAI,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;gCACtE,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;gCACzB,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;6BAC7B;yBACD;qBACD;oBACD,oBAAoB,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;iBAC1C;qBAAM;oBACN,IAAI,UAAU,CAAC,MAAM,EAAE;wBACtB,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;4BAC3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;wBACpB,CAAC,CAAC,CAAC;wBACH,oBAAoB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACjC;iBACD;aACD;iBAAM;gBACN,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC;aACvB;QACF,CAAC;KACD,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,eAAe,KAAK,CAAC","sourcesContent":["import { create, node, destroy } from '../vdom';\nimport { from as arrayFrom } from '../../shim/array';\nimport Map from '../../shim/Map';\nimport '../../shim/inert';\n\nconst factory = create({ node, destroy });\n\nexport const inert = factory(({ middleware: { node, destroy } }) => {\n\tconst inertInvertedNodeMap = new Map<string | number, any[]>();\n\tdestroy(() => {\n\t\tinertInvertedNodeMap.forEach((nodes) => {\n\t\t\tnodes.forEach((node) => {\n\t\t\t\tnode.inert = false;\n\t\t\t});\n\t\t});\n\t\tinertInvertedNodeMap.clear();\n\t});\n\treturn {\n\t\tset(key: string | number, enable: boolean, invert: boolean = false): void {\n\t\t\tconst domNode = node.get(key) as any;\n\t\t\tif (!domNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (invert) {\n\t\t\t\tconst inertNodes = inertInvertedNodeMap.get(key) || [];\n\t\t\t\tif (enable) {\n\t\t\t\t\tdomNode.inert = false;\n\t\t\t\t\tif (domNode.parentNode) {\n\t\t\t\t\t\tconst children = arrayFrom(domNode.parentNode.children) as any[];\n\t\t\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\t\t\tif (domNode !== children[i] && inertNodes.indexOf(children[i]) === -1) {\n\t\t\t\t\t\t\t\tchildren[i].inert = true;\n\t\t\t\t\t\t\t\tinertNodes.push(children[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tinertInvertedNodeMap.set(key, inertNodes);\n\t\t\t\t} else {\n\t\t\t\t\tif (inertNodes.length) {\n\t\t\t\t\t\tinertNodes.forEach((node) => {\n\t\t\t\t\t\t\tnode.inert = false;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tinertInvertedNodeMap.delete(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdomNode.inert = enable;\n\t\t\t}\n\t\t}\n\t};\n});\n\nexport default inert;\n"]}