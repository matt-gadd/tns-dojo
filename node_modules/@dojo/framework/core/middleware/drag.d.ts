/**
 * Results from a drag operation
 */
export interface DragResults {
    /**
     * The movement of pointer during the duration of the drag state
     */
    delta: Position;
    /**
     * Is the DOM node currently in a drag state
     */
    isDragging: boolean;
    /**
     * A matrix of posistions that represent the start position for the current drag interaction
     */
    start?: PositionMatrix;
}
/**
 * An x/y position structure
 */
export interface Position {
    /** Horizontal coordinate */
    x: number;
    /** Vertical coordinate */
    y: number;
}
/**
 * A matrix of x/y positions
 */
export interface PositionMatrix {
    /**
     * Client x/y position
     */
    client: Position;
    /**
     * Offset x/y position
     */
    offset: Position;
    /**
     * Page x/y position
     */
    page: Position;
    /**
     * Screen x/y position
     */
    screen: Position;
}
export declare const drag: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], {
    destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, (destroyFunction: () => void) => void>;
    icache: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], {
        invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, () => void>;
        destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, (destroyFunction: () => void) => void>;
    }, import("./icache").ICacheResult<void>>;
    invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, () => void>;
    node: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, {
        get(key: string | number): HTMLElement | null;
    }>;
}, {
    get(key: string | number): Readonly<DragResults>;
}>;
export default drag;
