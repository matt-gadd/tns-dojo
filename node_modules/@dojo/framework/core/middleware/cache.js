(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./../has", "../vdom", "./icache"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var has_1 = require("./../has");
    var vdom_1 = require("../vdom");
    var icache_1 = require("./icache");
    var factory = vdom_1.create({ icache: icache_1.default });
    exports.cache = factory(function (_a) {
        var icache = _a.middleware.icache;
        if (has_1.default('dojo-debug')) {
            console.warn('The cache middleware has been deprecated. Please use the icache middleware instead, for details please see the documentation https://dojo.io/learn/middleware/available-middleware#icache');
        }
        return {
            get: function (key) {
                return icache.get(key);
            },
            set: function (key, value) {
                icache.set(key, value, false);
            },
            has: function (key) {
                return icache.has(key);
            },
            delete: function (key) {
                icache.delete(key);
            },
            clear: function () {
                icache.clear();
            }
        };
    });
    exports.default = exports.cache;
});
//# sourceMappingURL=cache.js.map