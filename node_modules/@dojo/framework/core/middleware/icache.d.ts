export interface ICacheResult<S = void> {
    getOrSet: {
        <T extends void extends S ? any : keyof S>(key: void extends S ? any : T, value: void extends S ? () => Promise<T> : () => Promise<S[T]>, invalidate?: boolean): void extends S ? undefined | T : undefined | S[T];
        <T extends void extends S ? any : keyof S>(key: void extends S ? any : T, value: void extends S ? () => T : () => S[T], invalidate?: boolean): void extends S ? T : S[T];
        <T extends void extends S ? any : keyof S>(key: void extends S ? any : T, value: void extends S ? T : S[T], invalidate?: boolean): void extends S ? T : S[T];
    };
    get<T extends void extends S ? any : keyof S>(key: void extends S ? any : T): void extends S ? T | undefined : S[T] | undefined;
    set: {
        <T extends void extends S ? any : keyof S>(key: void extends S ? any : T, value: void extends S ? (value: T | undefined) => Promise<T> : (value: S[T] | undefined) => Promise<S[T]>, invalidate?: boolean): void extends S ? T | undefined : S[T] | undefined;
        <T extends void extends S ? any : keyof S>(key: void extends S ? any : T, value: void extends S ? (value: T | undefined) => T : (value: S[T] | undefined) => S[T], invalidate?: boolean): void extends S ? T : S[T];
        <T extends void extends S ? any : keyof S>(key: void extends S ? any : T, value: void extends S ? T : S[T], invalidate?: boolean): void extends S ? T : S[T];
    };
    has<T extends void extends S ? any : keyof S>(key: void extends S ? any : T): boolean;
    delete<T extends void extends S ? any : keyof S>(key: void extends S ? any : T, invalidate?: boolean): void;
    clear(invalidate?: boolean): void;
}
export declare const createICacheMiddleware: <S = void>() => import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], {
    invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, () => void>;
    destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, (destroyFunction: () => void) => void>;
}, ICacheResult<S>>;
export declare const icache: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], {
    invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, () => void>;
    destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, (destroyFunction: () => void) => void>;
}, ICacheResult<void>>;
export default icache;
