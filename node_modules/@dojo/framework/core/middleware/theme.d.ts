import { Theme, Classes, ClassNames, ThemeWithVariant, ThemeWithVariants, NamedVariant } from './../interfaces';
import { ThemeInjectorPayload, ThemeWithVariantsInjectorPayload } from '../ThemeInjector';
export { Theme, Classes, ClassNames } from './../interfaces';
export interface ThemeProperties {
    theme?: Theme | ThemeWithVariant;
    classes?: Classes;
}
export declare const THEME_KEY = " _key";
export declare const INJECTED_THEME_KEY = "__theme_injector";
export declare const theme: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties & ThemeProperties, import("../interfaces").DNode<any>[], {
    invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, () => void>;
    icache: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], {
        invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, () => void>;
        destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, (destroyFunction: () => void) => void>;
    }, import("./icache").ICacheResult<void>>;
    diffProperty: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, {
        <T extends (...args: any) => any, K extends keyof ReturnType<T>>(property: K, properties: T, diff: (current: ReturnType<T>, next: ReturnType<T>) => void | ReturnType<T>[K]): void;
        (propertyName: string, diff: (current: any, next: any) => void): void;
    }>;
    injector: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], {
        getRegistry: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, () => import("../RegistryHandler").RegistryHandler | null>;
        invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, () => void>;
        destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, (destroyFunction: () => void) => void>;
    }, {
        subscribe(label: string | symbol, callback?: Function): (() => void) | undefined;
        get<T>(label: string | symbol): T | null;
    }>;
    getRegistry: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").DNode<any>[], import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, () => import("../RegistryHandler").RegistryHandler | null>;
}, {
    classes<T extends ClassNames>(css: T): T;
    variant(): string | undefined;
    set: {
        (theme: Theme): void;
        <T extends ThemeWithVariants>(theme: T, variant?: NamedVariant | keyof T["variants"] | undefined): void;
    };
    get(): ThemeWithVariantsInjectorPayload | ThemeInjectorPayload | undefined;
}>;
export default theme;
