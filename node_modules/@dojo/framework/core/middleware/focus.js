(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../shim/global", "../vdom", "./icache"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var global_1 = require("../../shim/global");
    var vdom_1 = require("../vdom");
    var icache_1 = require("./icache");
    var icache = icache_1.createICacheMiddleware();
    var factory = vdom_1.create({ icache: icache, diffProperty: vdom_1.diffProperty, node: vdom_1.node, destroy: vdom_1.destroy, invalidator: vdom_1.invalidator }).properties();
    exports.focus = factory(function (_a) {
        var _b = _a.middleware, icache = _b.icache, diffProperty = _b.diffProperty, node = _b.node, destroy = _b.destroy, invalidator = _b.invalidator;
        var initialized = false;
        var currentElement;
        var previous = 0;
        var nodeSet = new Set();
        diffProperty('focus', function (_, next) {
            var result = next.focus && next.focus();
            if (result) {
                var current = icache.getOrSet('current', 0);
                icache.set('current', current + 1);
            }
        });
        function onFocusChange() {
            var activeElement = global_1.default.document.activeElement;
            if ((nodeSet.has(currentElement) || nodeSet.has(activeElement)) && currentElement !== activeElement) {
                invalidator();
            }
            currentElement = activeElement;
        }
        destroy(function () {
            global_1.default.document.removeEventListener('focusin', onFocusChange);
            global_1.default.document.removeEventListener('focusout', onFocusChange);
            nodeSet.clear();
        });
        return {
            shouldFocus: function () {
                var current = icache.get('current') || 0;
                var shouldFocus = current !== previous;
                previous = current;
                return shouldFocus;
            },
            focus: function () {
                var current = icache.getOrSet('current', 0);
                icache.set('current', current + 1);
            },
            isFocused: function (key) {
                var domNode = node.get(key);
                if (!domNode) {
                    return false;
                }
                nodeSet.add(domNode);
                if (!initialized) {
                    global_1.default.document.addEventListener('focusin', onFocusChange);
                    global_1.default.document.addEventListener('focusout', onFocusChange);
                    initialized = true;
                }
                return global_1.default.document.activeElement === domNode;
            }
        };
    });
    exports.default = exports.focus;
});
//# sourceMappingURL=focus.js.map