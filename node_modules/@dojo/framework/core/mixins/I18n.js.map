{"version":3,"file":"I18n.js","sourceRoot":"","sources":["I18n.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:interface-name */\nimport { localizeBundle, Bundle, Messages, setLocale, getCurrentLocale } from '../../i18n/i18n';\nimport { isVNode } from './../vdom';\nimport { afterRender } from './../decorators/afterRender';\nimport { getInjector } from './../decorators/inject';\nimport { Constructor, DNode, VNodeProperties, LocalizedMessages, I18nProperties, LocaleData } from './../interfaces';\nimport { Injector } from './../Injector';\nimport { WidgetBase } from './../WidgetBase';\nimport { decorate } from '../util';\nimport { isThenable } from '../../shim/Promise';\nimport beforeProperties from '../decorators/beforeProperties';\nimport { INJECTOR_KEY } from '../I18nInjector';\n\nexport { LocalizedMessages, I18nProperties, LocaleData } from './../interfaces';\nexport { INJECTOR_KEY, registerI18nInjector } from '../I18nInjector';\n\n/**\n * interface for I18n functionality\n */\nexport interface I18nMixin {\n\t/**\n\t * Return the cached messages for the specified bundle for the current locale, assuming they have already\n\t * been loaded. If the locale-specific messages have not been loaded, they are fetched and the widget state\n\t * is updated.\n\t *\n\t * @param bundle\n\t * The required bundle object for which available locale messages should be loaded.\n\t *\n\t * @return\n\t * An object containing the localized messages, along with a `format` method for formatting ICU-formatted\n\t * templates and an `isPlaceholder` property indicating whether the returned messages are the defaults.\n\t */\n\tlocalizeBundle<T extends Messages>(bundle: Bundle<T>): LocalizedMessages<T>;\n\n\tproperties: I18nProperties;\n}\n\n/**\n * @private\n * An internal helper interface for defining locale and text direction attributes on widget nodes.\n */\ninterface I18nVNodeProperties extends VNodeProperties {\n\tdir: string;\n\tlang: string;\n}\n\nconst previousLocaleMap: WeakMap<WidgetBase, string> = new WeakMap();\n\nexport function I18nMixin<T extends Constructor<WidgetBase<any>>>(Base: T): T & Constructor<I18nMixin> {\n\t@beforeProperties(function(this: WidgetBase & { own: Function }, properties: any) {\n\t\tconst injector = getInjector(this, INJECTOR_KEY);\n\t\tlet injectedLocale: string | undefined;\n\t\tlet injectedRtl: boolean | undefined;\n\t\tif (injector) {\n\t\t\tconst injectLocaleData = injector() as Injector<LocaleData>;\n\t\t\tif (injectLocaleData) {\n\t\t\t\tconst injectedLocaleData = injectLocaleData.get();\n\t\t\t\tif (injectedLocaleData) {\n\t\t\t\t\tinjectedLocale = injectedLocaleData.locale;\n\t\t\t\t\tinjectedRtl = injectedLocaleData.rtl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst previousLocale = previousLocaleMap.get(this);\n\t\tpreviousLocaleMap.set(this, properties.locale);\n\n\t\tif (properties.locale && previousLocale !== properties.locale) {\n\t\t\tconst result = setLocale({ locale: properties.locale, local: true });\n\t\t\tif (isThenable(result)) {\n\t\t\t\tresult.then(() => {\n\t\t\t\t\tthis.invalidate();\n\t\t\t\t});\n\t\t\t\treturn {\n\t\t\t\t\tlocale: previousLocale || injectedLocale || getCurrentLocale(),\n\t\t\t\t\trtl: properties.rtl !== undefined ? properties.rtl : injectedRtl\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tlocale: properties.locale || injectedLocale || getCurrentLocale(),\n\t\t\trtl: properties.rtl !== undefined ? properties.rtl : injectedRtl\n\t\t};\n\t})\n\tabstract class I18n extends Base {\n\t\tpublic abstract properties: I18nProperties;\n\n\t\tpublic localizeBundle<T extends Messages>(baseBundle: Bundle<T>): LocalizedMessages<T> {\n\t\t\tlet { locale, i18nBundle } = this.properties;\n\t\t\tif (i18nBundle) {\n\t\t\t\tif (i18nBundle instanceof Map) {\n\t\t\t\t\tbaseBundle = i18nBundle.get(baseBundle) || baseBundle;\n\t\t\t\t} else {\n\t\t\t\t\tbaseBundle = i18nBundle as Bundle<T>;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn localizeBundle(baseBundle, {\n\t\t\t\tlocale,\n\t\t\t\tinvalidator: () => {\n\t\t\t\t\tthis.invalidate();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t@afterRender()\n\t\tprotected renderDecorator(result: DNode | DNode[]): DNode | DNode[] {\n\t\t\tdecorate(result, {\n\t\t\t\tmodifier: (node, breaker) => {\n\t\t\t\t\tconst { locale, rtl } = this.properties;\n\t\t\t\t\tconst properties: Partial<I18nVNodeProperties> = {};\n\t\t\t\t\tif (typeof rtl === 'boolean') {\n\t\t\t\t\t\tproperties['dir'] = rtl ? 'rtl' : 'ltr';\n\t\t\t\t\t}\n\t\t\t\t\tif (locale) {\n\t\t\t\t\t\tproperties['lang'] = locale;\n\t\t\t\t\t}\n\t\t\t\t\tnode.properties = { ...node.properties, ...properties };\n\t\t\t\t\tbreaker();\n\t\t\t\t},\n\t\t\t\tpredicate: isVNode\n\t\t\t});\n\t\t\treturn result;\n\t\t}\n\t}\n\n\treturn I18n;\n}\n\nexport default I18nMixin;\n"]}