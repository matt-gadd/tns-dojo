(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../../i18n/i18n", "./../vdom", "./../decorators/afterRender", "./../decorators/inject", "../util", "../../shim/Promise", "../decorators/beforeProperties", "../I18nInjector", "../I18nInjector"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    /* tslint:disable:interface-name */
    var i18n_1 = require("../../i18n/i18n");
    var vdom_1 = require("./../vdom");
    var afterRender_1 = require("./../decorators/afterRender");
    var inject_1 = require("./../decorators/inject");
    var util_1 = require("../util");
    var Promise_1 = require("../../shim/Promise");
    var beforeProperties_1 = require("../decorators/beforeProperties");
    var I18nInjector_1 = require("../I18nInjector");
    var I18nInjector_2 = require("../I18nInjector");
    exports.INJECTOR_KEY = I18nInjector_2.INJECTOR_KEY;
    exports.registerI18nInjector = I18nInjector_2.registerI18nInjector;
    var previousLocaleMap = new WeakMap();
    function I18nMixin(Base) {
        var I18n = /** @class */ (function (_super) {
            tslib_1.__extends(I18n, _super);
            function I18n() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            I18n.prototype.localizeBundle = function (baseBundle) {
                var _this = this;
                var _a = this.properties, locale = _a.locale, i18nBundle = _a.i18nBundle;
                if (i18nBundle) {
                    if (i18nBundle instanceof Map) {
                        baseBundle = i18nBundle.get(baseBundle) || baseBundle;
                    }
                    else {
                        baseBundle = i18nBundle;
                    }
                }
                return i18n_1.localizeBundle(baseBundle, {
                    locale: locale,
                    invalidator: function () {
                        _this.invalidate();
                    }
                });
            };
            I18n.prototype.renderDecorator = function (result) {
                var _this = this;
                util_1.decorate(result, {
                    modifier: function (node, breaker) {
                        var _a = _this.properties, locale = _a.locale, rtl = _a.rtl;
                        var properties = {};
                        if (typeof rtl === 'boolean') {
                            properties['dir'] = rtl ? 'rtl' : 'ltr';
                        }
                        if (locale) {
                            properties['lang'] = locale;
                        }
                        node.properties = tslib_1.__assign({}, node.properties, properties);
                        breaker();
                    },
                    predicate: vdom_1.isVNode
                });
                return result;
            };
            tslib_1.__decorate([
                afterRender_1.afterRender()
            ], I18n.prototype, "renderDecorator", null);
            I18n = tslib_1.__decorate([
                beforeProperties_1.default(function (properties) {
                    var _this = this;
                    var injector = inject_1.getInjector(this, I18nInjector_1.INJECTOR_KEY);
                    var injectedLocale;
                    var injectedRtl;
                    if (injector) {
                        var injectLocaleData = injector();
                        if (injectLocaleData) {
                            var injectedLocaleData = injectLocaleData.get();
                            if (injectedLocaleData) {
                                injectedLocale = injectedLocaleData.locale;
                                injectedRtl = injectedLocaleData.rtl;
                            }
                        }
                    }
                    var previousLocale = previousLocaleMap.get(this);
                    previousLocaleMap.set(this, properties.locale);
                    if (properties.locale && previousLocale !== properties.locale) {
                        var result = i18n_1.setLocale({ locale: properties.locale, local: true });
                        if (Promise_1.isThenable(result)) {
                            result.then(function () {
                                _this.invalidate();
                            });
                            return {
                                locale: previousLocale || injectedLocale || i18n_1.getCurrentLocale(),
                                rtl: properties.rtl !== undefined ? properties.rtl : injectedRtl
                            };
                        }
                    }
                    return {
                        locale: properties.locale || injectedLocale || i18n_1.getCurrentLocale(),
                        rtl: properties.rtl !== undefined ? properties.rtl : injectedRtl
                    };
                })
            ], I18n);
            return I18n;
        }(Base));
        return I18n;
    }
    exports.I18nMixin = I18nMixin;
    exports.default = I18nMixin;
});
//# sourceMappingURL=I18n.js.map