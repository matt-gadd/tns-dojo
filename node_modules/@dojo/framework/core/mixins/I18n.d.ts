import { Bundle, Messages } from '../../i18n/i18n';
import { Constructor, LocalizedMessages, I18nProperties } from './../interfaces';
import { WidgetBase } from './../WidgetBase';
export { LocalizedMessages, I18nProperties, LocaleData } from './../interfaces';
export { INJECTOR_KEY, registerI18nInjector } from '../I18nInjector';
/**
 * interface for I18n functionality
 */
export interface I18nMixin {
    /**
     * Return the cached messages for the specified bundle for the current locale, assuming they have already
     * been loaded. If the locale-specific messages have not been loaded, they are fetched and the widget state
     * is updated.
     *
     * @param bundle
     * The required bundle object for which available locale messages should be loaded.
     *
     * @return
     * An object containing the localized messages, along with a `format` method for formatting ICU-formatted
     * templates and an `isPlaceholder` property indicating whether the returned messages are the defaults.
     */
    localizeBundle<T extends Messages>(bundle: Bundle<T>): LocalizedMessages<T>;
    properties: I18nProperties;
}
export declare function I18nMixin<T extends Constructor<WidgetBase<any>>>(Base: T): T & Constructor<I18nMixin>;
export default I18nMixin;
