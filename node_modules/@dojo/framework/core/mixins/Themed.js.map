{"version":3,"file":"Themed.js","sourceRoot":"","sources":["Themed.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tTheme,\n\tClasses,\n\tClassNames,\n\tConstructor,\n\tSupportedClassName,\n\tThemeWithVariant,\n\tThemeWithVariants\n} from './../interfaces';\nimport { Registry } from './../Registry';\nimport { inject } from './../decorators/inject';\nimport { WidgetBase } from './../WidgetBase';\nimport { handleDecorator } from './../decorators/handleDecorator';\nimport { diffProperty } from './../decorators/diffProperty';\nimport {\n\tThemeInjector,\n\tisThemeWithVariant,\n\tisThemeWithVariants,\n\tisThemeInjectorPayloadWithVariant\n} from '../ThemeInjector';\n\nexport { Theme, Classes, ClassNames } from './../interfaces';\n\n/**\n * Properties required for the Themed mixin\n */\nexport interface ThemedProperties<T = ClassNames> {\n\t/** Overriding custom theme for the widget */\n\ttheme?: Theme | ThemeWithVariant;\n\t/** Map of widget keys and associated overriding classes */\n\tclasses?: Classes;\n\t/** Extra classes to be applied to the widget */\n\textraClasses?: { [P in keyof T]?: string };\n}\n\nexport const THEME_KEY = ' _key';\n\nexport const INJECTED_THEME_KEY = '__theme_injector';\n\n/**\n * Interface for the ThemedMixin\n */\nexport interface ThemedMixin<T = ClassNames> {\n\ttheme(classes: SupportedClassName): SupportedClassName;\n\ttheme(classes: SupportedClassName[]): SupportedClassName[];\n\tvariant(): string | undefined;\n\tproperties: ThemedProperties<T>;\n}\n\n/**\n * Decorator for base css classes\n */\nexport function theme(theme: {}) {\n\treturn handleDecorator((target) => {\n\t\ttarget.addDecorator('baseThemeClasses', theme);\n\t});\n}\n\n/**\n * Creates a reverse lookup for the classes passed in via the `theme` function.\n *\n * @param classes The baseClasses object\n * @requires\n */\nfunction createThemeClassesLookup(classes: ClassNames[]): ClassNames {\n\treturn classes.reduce(\n\t\t(currentClassNames, baseClass) => {\n\t\t\tObject.keys(baseClass).forEach((key: string) => {\n\t\t\t\tcurrentClassNames[baseClass[key]] = key;\n\t\t\t});\n\t\t\treturn currentClassNames;\n\t\t},\n\t\t<ClassNames>{}\n\t);\n}\n\n/**\n * Convenience function that is given a theme and an optional registry, the theme\n * injector is defined against the registry, returning the theme.\n *\n * @param theme the theme to set\n * @param themeRegistry registry to define the theme injector against. Defaults\n * to the global registry\n *\n * @returns the theme injector used to set the theme\n */\nexport function registerThemeInjector(\n\ttheme: Theme | ThemeWithVariants | ThemeWithVariant,\n\tthemeRegistry: Registry\n): ThemeInjector {\n\tconst themeInjector = new ThemeInjector(theme);\n\tthemeRegistry.defineInjector(INJECTED_THEME_KEY, (invalidator) => {\n\t\tthemeInjector.setInvalidator(invalidator);\n\t\treturn () => themeInjector;\n\t});\n\treturn themeInjector;\n}\n\n/**\n * Function that returns a class decorated with with Themed functionality\n */\n\nexport function ThemedMixin<E, T extends Constructor<WidgetBase<ThemedProperties<E>>>>(\n\tBase: T\n): Constructor<ThemedMixin<E>> & T {\n\t@inject({\n\t\tname: INJECTED_THEME_KEY,\n\t\tgetProperties: (theme: ThemeInjector, properties: ThemedProperties): ThemedProperties => {\n\t\t\tif (!properties.theme) {\n\t\t\t\tconst payload = theme.get();\n\t\t\t\tif (isThemeInjectorPayloadWithVariant(payload)) {\n\t\t\t\t\treturn { theme: payload };\n\t\t\t\t} else if (payload) {\n\t\t\t\t\treturn { theme: payload.theme };\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {};\n\t\t}\n\t})\n\tabstract class Themed extends Base {\n\t\tpublic abstract properties: ThemedProperties<E>;\n\n\t\t/**\n\t\t * The Themed baseClasses\n\t\t */\n\t\tprivate _registeredBaseTheme: ClassNames | undefined;\n\n\t\t/**\n\t\t * Registered base theme keys\n\t\t */\n\t\tprivate _registeredBaseThemeKeys: string[] = [];\n\n\t\t/**\n\t\t * Reverse lookup of the theme classes\n\t\t */\n\t\tprivate _baseThemeClassesReverseLookup: ClassNames | undefined;\n\n\t\t/**\n\t\t * Indicates if classes meta data need to be calculated.\n\t\t */\n\t\tprivate _recalculateClasses = true;\n\n\t\t/**\n\t\t * Extra classes map\n\t\t */\n\t\tprivate _classes!: Classes;\n\n\t\t/**\n\t\t * Loaded theme\n\t\t */\n\t\tprivate _theme: ClassNames = {};\n\n\t\tpublic theme(classes: SupportedClassName): SupportedClassName;\n\t\tpublic theme(classes: SupportedClassName[]): SupportedClassName[];\n\t\tpublic theme(classes: SupportedClassName | SupportedClassName[]): SupportedClassName | SupportedClassName[] {\n\t\t\tif (this._recalculateClasses) {\n\t\t\t\tthis._recalculateThemeClasses();\n\t\t\t}\n\t\t\tif (Array.isArray(classes)) {\n\t\t\t\treturn classes.map((className) => this._getThemeClass(className));\n\t\t\t}\n\t\t\treturn this._getThemeClass(classes);\n\t\t}\n\n\t\tpublic variant() {\n\t\t\tconst { theme } = this.properties;\n\n\t\t\tif (theme && isThemeWithVariant(theme)) {\n\t\t\t\treturn theme.variant.value.root;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Function fired when `theme` or `extraClasses` are changed.\n\t\t */\n\t\t@diffProperty('theme')\n\t\t@diffProperty('extraClasses')\n\t\t@diffProperty('classes')\n\t\tprotected onPropertiesChanged() {\n\t\t\tthis._recalculateClasses = true;\n\t\t}\n\n\t\tprivate _getThemeClass(className: SupportedClassName): SupportedClassName {\n\t\t\tif (className === undefined || className === null || className === false || className === true) {\n\t\t\t\treturn className;\n\t\t\t}\n\n\t\t\tconst extraClasses = this.properties.extraClasses || ({} as any);\n\t\t\tconst themeClassName = this._baseThemeClassesReverseLookup![className];\n\t\t\tlet resultClassNames: string[] = [];\n\t\t\tif (!themeClassName) {\n\t\t\t\tconsole.warn(`Class name: '${className}' not found in theme`);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (this._classes) {\n\t\t\t\tconst classes = Object.keys(this._classes).reduce(\n\t\t\t\t\t(classes, key) => {\n\t\t\t\t\t\tconst classNames = Object.keys(this._classes[key]);\n\t\t\t\t\t\tfor (let i = 0; i < classNames.length; i++) {\n\t\t\t\t\t\t\tconst extraClass = this._classes[key][classNames[i]];\n\t\t\t\t\t\t\tif (classNames[i] === themeClassName && extraClass) {\n\t\t\t\t\t\t\t\textraClass.forEach((className) => {\n\t\t\t\t\t\t\t\t\tif (className && className !== true) {\n\t\t\t\t\t\t\t\t\t\tclasses.push(className);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn classes;\n\t\t\t\t\t},\n\t\t\t\t\t[] as string[]\n\t\t\t\t);\n\n\t\t\t\tresultClassNames.push(...classes);\n\t\t\t}\n\n\t\t\tif (extraClasses[themeClassName]) {\n\t\t\t\tresultClassNames.push(extraClasses[themeClassName]);\n\t\t\t}\n\n\t\t\tif (this._theme[themeClassName]) {\n\t\t\t\tresultClassNames.push(this._theme[themeClassName]);\n\t\t\t} else {\n\t\t\t\tresultClassNames.push(this._registeredBaseTheme![themeClassName]);\n\t\t\t}\n\t\t\treturn resultClassNames.join(' ');\n\t\t}\n\n\t\tprivate _recalculateThemeClasses() {\n\t\t\tlet { theme: themeProp = {}, classes = {} } = this.properties;\n\t\t\tlet theme: Theme;\n\n\t\t\tif (isThemeWithVariant(themeProp)) {\n\t\t\t\ttheme = isThemeWithVariants(themeProp.theme) ? themeProp.theme.theme : themeProp.theme;\n\t\t\t} else {\n\t\t\t\ttheme = themeProp;\n\t\t\t}\n\n\t\t\tif (!this._registeredBaseTheme) {\n\t\t\t\tconst baseThemes = this.getDecorator('baseThemeClasses');\n\t\t\t\tif (baseThemes.length === 0) {\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t'A base theme has not been provided to this widget. Please use the @theme decorator to add a theme.'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthis._registeredBaseTheme = baseThemes.reduce((finalBaseTheme, baseTheme) => {\n\t\t\t\t\tconst { [THEME_KEY]: key, ...classes } = baseTheme;\n\t\t\t\t\tthis._registeredBaseThemeKeys.push(key);\n\t\t\t\t\treturn { ...finalBaseTheme, ...classes };\n\t\t\t\t}, {});\n\t\t\t\tthis._baseThemeClassesReverseLookup = createThemeClassesLookup(baseThemes);\n\t\t\t}\n\n\t\t\tthis._theme = this._registeredBaseThemeKeys.reduce((baseTheme, themeKey) => {\n\t\t\t\treturn { ...baseTheme, ...theme[themeKey] };\n\t\t\t}, {});\n\n\t\t\tthis._classes = Object.keys(classes).reduce((computed, key) => {\n\t\t\t\tif (this._registeredBaseThemeKeys.indexOf(key) > -1) {\n\t\t\t\t\tcomputed = { ...computed, [key]: classes[key] };\n\t\t\t\t}\n\t\t\t\treturn computed;\n\t\t\t}, {});\n\n\t\t\tthis._recalculateClasses = false;\n\t\t}\n\t}\n\n\treturn Themed;\n}\n\nexport default ThemedMixin;\n"]}