var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/* tslint:disable:interface-name */
import { localizeBundle, setLocale, getCurrentLocale } from '../../i18n/i18n';
import { isVNode } from './../vdom';
import { afterRender } from './../decorators/afterRender';
import { getInjector } from './../decorators/inject';
import { decorate } from '../util';
import { isThenable } from '../../shim/Promise';
import beforeProperties from '../decorators/beforeProperties';
import { INJECTOR_KEY } from '../I18nInjector';
export { INJECTOR_KEY, registerI18nInjector } from '../I18nInjector';
const previousLocaleMap = new WeakMap();
export function I18nMixin(Base) {
    let I18n = class I18n extends Base {
        localizeBundle(baseBundle) {
            let { locale, i18nBundle } = this.properties;
            if (i18nBundle) {
                if (i18nBundle instanceof Map) {
                    baseBundle = i18nBundle.get(baseBundle) || baseBundle;
                }
                else {
                    baseBundle = i18nBundle;
                }
            }
            return localizeBundle(baseBundle, {
                locale,
                invalidator: () => {
                    this.invalidate();
                }
            });
        }
        renderDecorator(result) {
            decorate(result, {
                modifier: (node, breaker) => {
                    const { locale, rtl } = this.properties;
                    const properties = {};
                    if (typeof rtl === 'boolean') {
                        properties['dir'] = rtl ? 'rtl' : 'ltr';
                    }
                    if (locale) {
                        properties['lang'] = locale;
                    }
                    node.properties = Object.assign({}, node.properties, properties);
                    breaker();
                },
                predicate: isVNode
            });
            return result;
        }
    };
    __decorate([
        afterRender()
    ], I18n.prototype, "renderDecorator", null);
    I18n = __decorate([
        beforeProperties(function (properties) {
            const injector = getInjector(this, INJECTOR_KEY);
            let injectedLocale;
            let injectedRtl;
            if (injector) {
                const injectLocaleData = injector();
                if (injectLocaleData) {
                    const injectedLocaleData = injectLocaleData.get();
                    if (injectedLocaleData) {
                        injectedLocale = injectedLocaleData.locale;
                        injectedRtl = injectedLocaleData.rtl;
                    }
                }
            }
            const previousLocale = previousLocaleMap.get(this);
            previousLocaleMap.set(this, properties.locale);
            if (properties.locale && previousLocale !== properties.locale) {
                const result = setLocale({ locale: properties.locale, local: true });
                if (isThenable(result)) {
                    result.then(() => {
                        this.invalidate();
                    });
                    return {
                        locale: previousLocale || injectedLocale || getCurrentLocale(),
                        rtl: properties.rtl !== undefined ? properties.rtl : injectedRtl
                    };
                }
            }
            return {
                locale: properties.locale || injectedLocale || getCurrentLocale(),
                rtl: properties.rtl !== undefined ? properties.rtl : injectedRtl
            };
        })
    ], I18n);
    return I18n;
}
export default I18nMixin;
//# sourceMappingURL=I18n.mjs.map