import { Theme, ThemeWithVariants, ThemeWithVariant, NamedVariant } from './interfaces';
import Injector from './Injector';
export interface ThemeWithVariantsInjectorPayload {
    theme: ThemeWithVariants;
    variant: NamedVariant;
}
export interface ThemeInjectorPayload {
    theme: Theme;
}
export declare function isVariantModule(variant: string | NamedVariant): variant is NamedVariant;
export declare function isThemeWithVariant(theme: Theme | ThemeWithVariants | ThemeWithVariant): theme is ThemeWithVariant;
export declare function isThemeWithVariants(theme: Theme | ThemeWithVariants | ThemeWithVariant): theme is ThemeWithVariants;
export declare function isThemeInjectorPayloadWithVariant(theme: ThemeInjectorPayload | ThemeWithVariantsInjectorPayload | undefined): theme is ThemeWithVariantsInjectorPayload;
export declare class ThemeInjector extends Injector {
    constructor(theme?: Theme | ThemeWithVariants | ThemeWithVariant);
    set<T extends ThemeWithVariants>(theme: T, variant?: keyof T['variants'] | NamedVariant): void;
    set(theme: ThemeWithVariant): void;
    set(theme: Theme): void;
    get(): ThemeWithVariantsInjectorPayload | ThemeInjectorPayload | undefined;
}
export default ThemeInjector;
