{"version":3,"file":"ThemeInjector.js","sourceRoot":"","sources":["ThemeInjector.ts"],"names":[],"mappings":"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","sourcesContent":["import global from '../shim/global';\nimport { Theme, ThemeWithVariants, ThemeWithVariant, NamedVariant } from './interfaces';\nimport Injector from './Injector';\nimport cssVars from '../shim/cssVariables';\nimport Map from '../shim/Map';\nimport has from './has';\n\nexport interface ThemeWithVariantsInjectorPayload {\n\ttheme: ThemeWithVariants;\n\tvariant: NamedVariant;\n}\n\nexport interface ThemeInjectorPayload {\n\ttheme: Theme;\n}\n\nexport function isVariantModule(variant: string | NamedVariant): variant is NamedVariant {\n\treturn typeof variant !== 'string';\n}\n\nexport function isThemeWithVariant(theme: Theme | ThemeWithVariants | ThemeWithVariant): theme is ThemeWithVariant {\n\treturn theme && theme.hasOwnProperty('variant');\n}\n\nexport function isThemeWithVariants(theme: Theme | ThemeWithVariants | ThemeWithVariant): theme is ThemeWithVariants {\n\treturn theme && theme.hasOwnProperty('variants');\n}\n\nexport function isThemeInjectorPayloadWithVariant(\n\ttheme: ThemeInjectorPayload | ThemeWithVariantsInjectorPayload | undefined\n): theme is ThemeWithVariantsInjectorPayload {\n\treturn !!theme && theme.hasOwnProperty('variant');\n}\n\nlet processCssVariant = function(_: string) {};\n\nif (!has('dom-css-variables')) {\n\tconst setUpCssVariantSupport = () => {\n\t\tconst styleId = '__dojo_processed_styles';\n\t\tconst processedCssMap = new Map<string, string>();\n\t\tlet variantStyleElement: HTMLStyleElement | undefined;\n\n\t\tfunction applyStyles(css: string) {\n\t\t\tconst style = document.createElement('style');\n\t\t\tstyle.textContent = css;\n\t\t\tstyle.setAttribute('id', styleId);\n\t\t\tif (variantStyleElement && variantStyleElement.parentNode) {\n\t\t\t\tvariantStyleElement.parentNode.replaceChild(style, variantStyleElement);\n\t\t\t} else {\n\t\t\t\tglobal.document.head.appendChild(style);\n\t\t\t}\n\t\t\tvariantStyleElement = style;\n\t\t}\n\n\t\treturn function processCssVariant(variantName: string) {\n\t\t\tconst processedCss = processedCssMap.get(variantName);\n\t\t\tif (processedCss) {\n\t\t\t\tapplyStyles(processedCss);\n\t\t\t} else {\n\t\t\t\tcssVars({\n\t\t\t\t\texclude: `style[id=${styleId}]`,\n\t\t\t\t\tonSuccess: (css) => {\n\t\t\t\t\t\tlet temp = css;\n\t\t\t\t\t\tlet index = temp.indexOf(variantName);\n\t\t\t\t\t\tlet variantCss = '';\n\t\t\t\t\t\twhile (index !== -1) {\n\t\t\t\t\t\t\ttemp = temp.substring(index + variantName.length);\n\t\t\t\t\t\t\tconst match = temp.match(/\\{([^}]+)\\}/);\n\t\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\t\tif (variantCss) {\n\t\t\t\t\t\t\t\t\tvariantCss = `${variantCss.substring(0, variantCss.length - 1)}${match[0].substring(\n\t\t\t\t\t\t\t\t\t\t1\n\t\t\t\t\t\t\t\t\t)}`;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvariantCss = match[0];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tindex = temp.indexOf(variantName);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (variantCss) {\n\t\t\t\t\t\t\tcss = `:root ${variantCss}${css}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn css;\n\t\t\t\t\t},\n\t\t\t\t\tonComplete: (css) => {\n\t\t\t\t\t\tprocessedCssMap.set(variantName, css);\n\t\t\t\t\t\tapplyStyles(css);\n\t\t\t\t\t},\n\t\t\t\t\tupdateDOM: false,\n\t\t\t\t\tsilent: true\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t};\n\tprocessCssVariant = setUpCssVariantSupport();\n}\n\nfunction createThemeInjectorPayload(\n\ttheme: Theme | ThemeWithVariants | ThemeWithVariant,\n\tvariant?: string | NamedVariant\n): ThemeWithVariantsInjectorPayload | ThemeInjectorPayload {\n\tif (isThemeWithVariant(theme)) {\n\t\tif (typeof theme.variant === 'string') {\n\t\t\treturn {\n\t\t\t\ttheme: theme.theme,\n\t\t\t\tvariant: { name: theme.variant, value: theme.theme.variants[theme.variant] }\n\t\t\t};\n\t\t}\n\t\treturn { theme: theme.theme, variant: theme.variant };\n\t} else if (isThemeWithVariants(theme)) {\n\t\tvariant = variant || 'default';\n\t\tif (isVariantModule(variant)) {\n\t\t\tif (!has('dom-css-variables')) {\n\t\t\t\tprocessCssVariant(variant.value.root);\n\t\t\t}\n\t\t\treturn { theme, variant };\n\t\t}\n\t\tif (!has('dom-css-variables')) {\n\t\t\tprocessCssVariant(theme.variants[variant].root);\n\t\t}\n\n\t\treturn { theme: theme, variant: { name: variant, value: theme.variants[variant] } };\n\t}\n\treturn { theme };\n}\n\nexport class ThemeInjector extends Injector {\n\tconstructor(theme?: Theme | ThemeWithVariants | ThemeWithVariant) {\n\t\tsuper(theme ? createThemeInjectorPayload(theme) : theme);\n\t}\n\n\tset<T extends ThemeWithVariants>(theme: T, variant?: keyof T['variants'] | NamedVariant): void;\n\tset(theme: ThemeWithVariant): void;\n\tset(theme: Theme): void;\n\tset(theme: Theme | ThemeWithVariants | ThemeWithVariant, variant?: string | NamedVariant) {\n\t\tsuper.set(createThemeInjectorPayload(theme, variant));\n\t}\n\n\tget(): ThemeWithVariantsInjectorPayload | ThemeInjectorPayload | undefined {\n\t\treturn super.get();\n\t}\n}\n\nexport default ThemeInjector;\n"]}