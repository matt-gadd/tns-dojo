import WeakMap from '../../shim/WeakMap';
import { handleDecorator } from './handleDecorator';
import { beforeProperties } from './beforeProperties';
/**
 * Map of instances against registered injectors.
 */
const registeredInjectorsMap = new WeakMap();
export function getInjector(instance, name) {
    const injectorItem = instance.registry.getInjector(name);
    if (injectorItem) {
        const { injector, invalidator } = injectorItem;
        const registeredInjectors = registeredInjectorsMap.get(instance) || [];
        if (registeredInjectors.length === 0) {
            registeredInjectorsMap.set(instance, registeredInjectors);
        }
        if (registeredInjectors.indexOf(injectorItem) === -1) {
            instance.own(invalidator.on('invalidate', () => {
                instance.invalidate();
            }));
            registeredInjectors.push(injectorItem);
        }
        return injector;
    }
}
/**
 * Decorator retrieves an injector from an available registry using the name and
 * calls the `getProperties` function with the payload from the injector
 * and current properties with the the injected properties returned.
 *
 * @param InjectConfig the inject configuration
 */
export function inject({ name, getProperties }) {
    return handleDecorator((target) => {
        beforeProperties(function (properties) {
            const injector = getInjector(this, name);
            if (injector) {
                return getProperties(injector(), properties);
            }
        })(target);
    });
}
export default inject;
//# sourceMappingURL=inject.mjs.map