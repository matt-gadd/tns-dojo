import { create, invalidator } from '../../../core/vdom';
import validity from '../../../core/middleware/validity';
export function createValidityMock() {
    const mockNodes = {};
    let invalidate;
    const mockNode = {
        get(key) {
            return mockNodes[key];
        }
    };
    const factory = create({ invalidator });
    const mockValidityFactory = factory(({ id, middleware, properties, children }) => {
        const { callback } = validity();
        invalidate = middleware.invalidator;
        return callback({ id, middleware: Object.assign({}, middleware, { node: mockNode }), properties, children });
    });
    function mockValidity(key, value = {}) {
        if (key) {
            const { valid, message: validationMessage } = value;
            mockNodes[key] = {
                validity: { valid },
                validationMessage
            };
            invalidate && invalidate();
        }
        else {
            return mockValidityFactory();
        }
    }
    return mockValidity;
}
export default createValidityMock;
//# sourceMappingURL=validity.mjs.map