(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../../../core/vdom", "../../../core/middleware/validity"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var vdom_1 = require("../../../core/vdom");
    var validity_1 = require("../../../core/middleware/validity");
    function createValidityMock() {
        var mockNodes = {};
        var invalidate;
        var mockNode = {
            get: function (key) {
                return mockNodes[key];
            }
        };
        var factory = vdom_1.create({ invalidator: vdom_1.invalidator });
        var mockValidityFactory = factory(function (_a) {
            var id = _a.id, middleware = _a.middleware, properties = _a.properties, children = _a.children;
            var callback = validity_1.default().callback;
            invalidate = middleware.invalidator;
            return callback({ id: id, middleware: tslib_1.__assign({}, middleware, { node: mockNode }), properties: properties, children: children });
        });
        function mockValidity(key, value) {
            if (value === void 0) { value = {}; }
            if (key) {
                var valid = value.valid, validationMessage = value.message;
                mockNodes[key] = {
                    validity: { valid: valid },
                    validationMessage: validationMessage
                };
                invalidate && invalidate();
            }
            else {
                return mockValidityFactory();
            }
        }
        return mockValidity;
    }
    exports.createValidityMock = createValidityMock;
    exports.default = createValidityMock;
});
//# sourceMappingURL=validity.js.map