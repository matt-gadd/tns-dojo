{"version":3,"file":"validity.mjs","sourceRoot":"","sources":["validity.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AACzD,OAAO,QAAQ,MAAM,mCAAmC,CAAC;AAQzD,MAAM,UAAU,kBAAkB;IACjC,MAAM,SAAS,GAAQ,EAAE,CAAC;IAC1B,IAAI,UAAkC,CAAC;IACvC,MAAM,QAAQ,GAAG;QAChB,GAAG,CAAC,GAAW;YACd,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC;KACD,CAAC;IAEF,MAAM,OAAO,GAAG,MAAM,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;IAExC,MAAM,mBAAmB,GAAG,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,EAAE,EAAE;QAChF,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,EAAE,CAAC;QAChC,UAAU,GAAG,UAAU,CAAC,WAAW,CAAC;QACpC,OAAO,QAAQ,CAAC,EAAE,EAAE,EAAE,UAAU,oBAAO,UAAU,IAAE,IAAI,EAAE,QAAQ,GAAE,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC9F,CAAC,CAAC,CAAC;IAIH,SAAS,YAAY,CAAC,GAAY,EAAE,QAAwB,EAAE;QAC7D,IAAI,GAAG,EAAE;YACR,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,iBAAiB,EAAE,GAAG,KAAK,CAAC;YACpD,SAAS,CAAC,GAAG,CAAC,GAAG;gBAChB,QAAQ,EAAE,EAAE,KAAK,EAAE;gBACnB,iBAAiB;aACjB,CAAC;YACF,UAAU,IAAI,UAAU,EAAE,CAAC;SAC3B;aAAM;YACN,OAAO,mBAAmB,EAAE,CAAC;SAC7B;IACF,CAAC;IAED,OAAO,YAAY,CAAC;AACrB,CAAC;AAED,eAAe,kBAAkB,CAAC","sourcesContent":["import { create, invalidator } from '../../../core/vdom';\nimport validity from '../../../core/middleware/validity';\nimport { DefaultMiddlewareResult } from '../../../core/interfaces';\n\ninterface ValidityResult {\n\tvalid?: boolean;\n\tmessage?: string;\n}\n\nexport function createValidityMock() {\n\tconst mockNodes: any = {};\n\tlet invalidate: () => void | undefined;\n\tconst mockNode = {\n\t\tget(key: string) {\n\t\t\treturn mockNodes[key];\n\t\t}\n\t};\n\n\tconst factory = create({ invalidator });\n\n\tconst mockValidityFactory = factory(({ id, middleware, properties, children }) => {\n\t\tconst { callback } = validity();\n\t\tinvalidate = middleware.invalidator;\n\t\treturn callback({ id, middleware: { ...middleware, node: mockNode }, properties, children });\n\t});\n\n\tfunction mockValidity(): DefaultMiddlewareResult;\n\tfunction mockValidity(key: string, value: ValidityResult): void;\n\tfunction mockValidity(key?: string, value: ValidityResult = {}): void | DefaultMiddlewareResult {\n\t\tif (key) {\n\t\t\tconst { valid, message: validationMessage } = value;\n\t\t\tmockNodes[key] = {\n\t\t\t\tvalidity: { valid },\n\t\t\t\tvalidationMessage\n\t\t\t};\n\t\t\tinvalidate && invalidate();\n\t\t} else {\n\t\t\treturn mockValidityFactory();\n\t\t}\n\t}\n\n\treturn mockValidity;\n}\n\nexport default createValidityMock;\n"]}