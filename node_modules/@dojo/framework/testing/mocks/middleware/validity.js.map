{"version":3,"file":"validity.js","sourceRoot":"","sources":["validity.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,2CAAyD;IACzD,8DAAyD;IAQzD,SAAgB,kBAAkB;QACjC,IAAM,SAAS,GAAQ,EAAE,CAAC;QAC1B,IAAI,UAAkC,CAAC;QACvC,IAAM,QAAQ,GAAG;YAChB,GAAG,EAAH,UAAI,GAAW;gBACd,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;YACvB,CAAC;SACD,CAAC;QAEF,IAAM,OAAO,GAAG,aAAM,CAAC,EAAE,WAAW,oBAAA,EAAE,CAAC,CAAC;QAExC,IAAM,mBAAmB,GAAG,OAAO,CAAC,UAAC,EAAwC;gBAAtC,UAAE,EAAE,0BAAU,EAAE,0BAAU,EAAE,sBAAQ;YAClE,IAAA,wCAAQ,CAAgB;YAChC,UAAU,GAAG,UAAU,CAAC,WAAW,CAAC;YACpC,OAAO,QAAQ,CAAC,EAAE,EAAE,IAAA,EAAE,UAAU,uBAAO,UAAU,IAAE,IAAI,EAAE,QAAQ,GAAE,EAAE,UAAU,YAAA,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC;QAIH,SAAS,YAAY,CAAC,GAAY,EAAE,KAA0B;YAA1B,sBAAA,EAAA,UAA0B;YAC7D,IAAI,GAAG,EAAE;gBACA,IAAA,mBAAK,EAAE,iCAA0B,CAAW;gBACpD,SAAS,CAAC,GAAG,CAAC,GAAG;oBAChB,QAAQ,EAAE,EAAE,KAAK,OAAA,EAAE;oBACnB,iBAAiB,mBAAA;iBACjB,CAAC;gBACF,UAAU,IAAI,UAAU,EAAE,CAAC;aAC3B;iBAAM;gBACN,OAAO,mBAAmB,EAAE,CAAC;aAC7B;QACF,CAAC;QAED,OAAO,YAAY,CAAC;IACrB,CAAC;IAjCD,gDAiCC;IAED,kBAAe,kBAAkB,CAAC","sourcesContent":["import { create, invalidator } from '../../../core/vdom';\nimport validity from '../../../core/middleware/validity';\nimport { DefaultMiddlewareResult } from '../../../core/interfaces';\n\ninterface ValidityResult {\n\tvalid?: boolean;\n\tmessage?: string;\n}\n\nexport function createValidityMock() {\n\tconst mockNodes: any = {};\n\tlet invalidate: () => void | undefined;\n\tconst mockNode = {\n\t\tget(key: string) {\n\t\t\treturn mockNodes[key];\n\t\t}\n\t};\n\n\tconst factory = create({ invalidator });\n\n\tconst mockValidityFactory = factory(({ id, middleware, properties, children }) => {\n\t\tconst { callback } = validity();\n\t\tinvalidate = middleware.invalidator;\n\t\treturn callback({ id, middleware: { ...middleware, node: mockNode }, properties, children });\n\t});\n\n\tfunction mockValidity(): DefaultMiddlewareResult;\n\tfunction mockValidity(key: string, value: ValidityResult): void;\n\tfunction mockValidity(key?: string, value: ValidityResult = {}): void | DefaultMiddlewareResult {\n\t\tif (key) {\n\t\t\tconst { valid, message: validationMessage } = value;\n\t\t\tmockNodes[key] = {\n\t\t\t\tvalidity: { valid },\n\t\t\t\tvalidationMessage\n\t\t\t};\n\t\t\tinvalidate && invalidate();\n\t\t} else {\n\t\t\treturn mockValidityFactory();\n\t\t}\n\t}\n\n\treturn mockValidity;\n}\n\nexport default createValidityMock;\n"]}