(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../../core/vdom", "../../../core/middleware/focus", "../../../core/middleware/icache"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var vdom_1 = require("../../../core/vdom");
    var focus_1 = require("../../../core/middleware/focus");
    var icache_1 = require("../../../core/middleware/icache");
    var icache = icache_1.createICacheMiddleware();
    function createFocusMock() {
        var focusNodes = {};
        var invalidate;
        var factory = vdom_1.create({ invalidator: vdom_1.invalidator, destroy: vdom_1.destroy, icache: icache, diffProperty: vdom_1.diffProperty, node: vdom_1.node });
        var mockFocusFactory = factory(function (_a) {
            var id = _a.id, middleware = _a.middleware, properties = _a.properties, children = _a.children;
            invalidate = middleware.invalidator;
            var callback = focus_1.default().callback;
            var focusMiddleware = callback({
                id: id,
                middleware: middleware,
                properties: properties,
                children: children
            });
            focusMiddleware.isFocused = function (key) { return !!focusNodes[key]; };
            return focusMiddleware;
        });
        function mockFocus(key, value) {
            if (key && value) {
                focusNodes[key] = value;
                invalidate && invalidate();
            }
            else {
                return mockFocusFactory();
            }
        }
        return mockFocus;
    }
    exports.createFocusMock = createFocusMock;
    exports.default = createFocusMock;
});
//# sourceMappingURL=focus.js.map