{"version":3,"file":"focus.mjs","sourceRoot":"","sources":["focus.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AACtF,OAAO,KAAqB,MAAM,gCAAgC,CAAC;AACnE,OAAO,EAAE,sBAAsB,EAAE,MAAM,iCAAiC,CAAC;AAGzE,MAAM,MAAM,GAAG,sBAAsB,EAAc,CAAC;AACpD,MAAM,UAAU,eAAe;IAC9B,MAAM,UAAU,GAA+B,EAAE,CAAC;IAClD,IAAI,UAAkC,CAAC;IAEvC,MAAM,OAAO,GAAG,MAAM,CAAC,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;IAE7E,MAAM,gBAAgB,GAAG,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,EAAE,EAAE;QAC7E,UAAU,GAAG,UAAU,CAAC,WAAW,CAAC;QACpC,MAAM,EAAE,QAAQ,EAAE,GAAG,KAAK,EAAE,CAAC;QAC7B,MAAM,eAAe,GAAG,QAAQ,CAAC;YAChC,EAAE;YACF,UAAU;YACV,UAAU;YACV,QAAQ;SACR,CAAC,CAAC;QAEH,eAAe,CAAC,SAAS,GAAG,CAAC,GAAoB,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAExE,OAAO,eAAe,CAAC;IACxB,CAAC,CAAC,CAAC;IAIH,SAAS,SAAS,CAAC,GAAqB,EAAE,KAAe;QACxD,IAAI,GAAG,IAAI,KAAK,EAAE;YACjB,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;YACxB,UAAU,IAAI,UAAU,EAAE,CAAC;SAC3B;aAAM;YACN,OAAO,gBAAgB,EAAE,CAAC;SAC1B;IACF,CAAC;IAED,OAAO,SAAS,CAAC;AAClB,CAAC;AAED,eAAe,eAAe,CAAC","sourcesContent":["import { create, invalidator, diffProperty, destroy, node } from '../../../core/vdom';\nimport focus, { FocusState } from '../../../core/middleware/focus';\nimport { createICacheMiddleware } from '../../../core/middleware/icache';\nimport { DefaultMiddlewareResult } from '../../../core/interfaces';\n\nconst icache = createICacheMiddleware<FocusState>();\nexport function createFocusMock() {\n\tconst focusNodes: { [key: string]: boolean } = {};\n\tlet invalidate: () => void | undefined;\n\n\tconst factory = create({ invalidator, destroy, icache, diffProperty, node });\n\n\tconst mockFocusFactory = factory(({ id, middleware, properties, children }) => {\n\t\tinvalidate = middleware.invalidator;\n\t\tconst { callback } = focus();\n\t\tconst focusMiddleware = callback({\n\t\t\tid,\n\t\t\tmiddleware,\n\t\t\tproperties,\n\t\t\tchildren\n\t\t});\n\n\t\tfocusMiddleware.isFocused = (key: string | number) => !!focusNodes[key];\n\n\t\treturn focusMiddleware;\n\t});\n\n\tfunction mockFocus(): DefaultMiddlewareResult;\n\tfunction mockFocus(key: string | number, value: boolean): void;\n\tfunction mockFocus(key?: string | number, value?: boolean): void | DefaultMiddlewareResult {\n\t\tif (key && value) {\n\t\t\tfocusNodes[key] = value;\n\t\t\tinvalidate && invalidate();\n\t\t} else {\n\t\t\treturn mockFocusFactory();\n\t\t}\n\t}\n\n\treturn mockFocus;\n}\n\nexport default createFocusMock;\n"]}