import { create, invalidator, diffProperty, destroy, node } from '../../../core/vdom';
import focus from '../../../core/middleware/focus';
import { createICacheMiddleware } from '../../../core/middleware/icache';
const icache = createICacheMiddleware();
export function createFocusMock() {
    const focusNodes = {};
    let invalidate;
    const factory = create({ invalidator, destroy, icache, diffProperty, node });
    const mockFocusFactory = factory(({ id, middleware, properties, children }) => {
        invalidate = middleware.invalidator;
        const { callback } = focus();
        const focusMiddleware = callback({
            id,
            middleware,
            properties,
            children
        });
        focusMiddleware.isFocused = (key) => !!focusNodes[key];
        return focusMiddleware;
    });
    function mockFocus(key, value) {
        if (key && value) {
            focusNodes[key] = value;
            invalidate && invalidate();
        }
        else {
            return mockFocusFactory();
        }
    }
    return mockFocus;
}
export default createFocusMock;
//# sourceMappingURL=focus.mjs.map