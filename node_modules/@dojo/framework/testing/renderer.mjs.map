{"version":3,"file":"renderer.mjs","sourceRoot":"","sources":["renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import assertRender from './assertRender';\nimport {\n\tWNode,\n\tDNode,\n\tConstructor,\n\tCallback,\n\tRenderResult,\n\tMiddlewareResultFactory,\n\tWNodeFactory,\n\tVNodeProperties,\n\tOptionalWNodeFactory,\n\tWidgetBaseInterface,\n\tDefaultChildrenWNodeFactory,\n\tVNode,\n\tDefaultMiddlewareResult\n} from '../core/interfaces';\nimport { WidgetBase } from '../core/WidgetBase';\nimport { isWidgetFunction } from '../core/Registry';\nimport { invalidator, diffProperty, destroy, create, propertiesDiff, w, v, isVNode, isWNode } from '../core/vdom';\nimport { uuid } from '../core/util';\nimport decorate, { decorateNodes } from './decorate';\nimport { decorate as coreDecorate } from '../core/util';\nimport { Wrapped, WidgetFactory, CompareFunc, Comparable, NonComparable } from './interfaces';\n\nexport interface ChildInstruction {\n\ttype: 'child';\n\twrapped: Wrapped<any>;\n\tparams: any;\n}\n\nexport interface PropertyInstruction {\n\ttype: 'property';\n\tid: string;\n\tkey: string;\n\twrapped: Wrapped<any>;\n\tparams: any;\n}\n\nexport type Instruction = ChildInstruction | PropertyInstruction;\n\nexport interface Child {\n\t<T extends WNodeFactory<{ properties: any; children: any }>>(\n\t\twrapped: Wrapped<T>,\n\t\tparams: T['children'] extends { [index: string]: any }\n\t\t\t? {\n\t\t\t\t\t[P in keyof T['children']]?: Parameters<T['children'][P]> extends never\n\t\t\t\t\t\t? []\n\t\t\t\t\t\t: Parameters<T['children'][P]>\n\t\t\t  }\n\t\t\t: T['children'] extends (...args: any[]) => RenderResult ? Parameters<T['children']> : never\n\t): void;\n}\n\nexport type KnownKeys<T> = { [K in keyof T]: string extends K ? never : number extends K ? never : K } extends {\n\t[_ in keyof T]: infer U\n}\n\t? U\n\t: never;\nexport type FunctionPropertyNames<T> = {\n\t[K in keyof T]: T[K] extends ((...args: any[]) => any | undefined) ? K : never\n}[keyof T];\nexport type RequiredVNodeProperties = Required<Pick<VNodeProperties, KnownKeys<VNodeProperties>>>;\n\nexport interface Property {\n\t<T extends WidgetBase<any>, K extends FunctionPropertyNames<Required<T['properties']>>>(\n\t\twrapped: Wrapped<Constructor<T>>,\n\t\tkey: K,\n\t\t...params: Parameters<Exclude<T['properties'][K], CompareFunc<any>>>\n\t): void;\n\t<\n\t\tT extends OptionalWNodeFactory<{ properties: Comparable<VNodeProperties>; children: any }>,\n\t\tK extends FunctionPropertyNames<RequiredVNodeProperties>\n\t>(\n\t\twrapped: Wrapped<T>,\n\t\tkey: K,\n\t\t...params: any[]\n\t): void;\n\t<T extends WidgetFactory, K extends FunctionPropertyNames<Required<T['properties']>>>(\n\t\twrapped: Wrapped<T>,\n\t\tkey: K,\n\t\t...params: Parameters<Exclude<T['properties'][K], CompareFunc<any>>>\n\t): void;\n}\n\ninterface RendererOptions {\n\tmiddleware?: [MiddlewareResultFactory<any, any, any, any>, () => DefaultMiddlewareResult][];\n}\n\nexport type PropertiesComparatorFunction<T = any> = (actualProperties: T) => T;\n\nexport type TemplateChildren<T = DNode[]> = () => T;\n\nexport interface DecoratorResult<T> {\n\thasDeferredProperties: boolean;\n\tnodes: T;\n}\n\nfunction isWrappedNode(value: any): value is (WNode & { id: string }) | (WNode & { id: string }) {\n\treturn Boolean(value && value.id && (isWNode(value) || isVNode(value)));\n}\n\nfunction findNode<T extends Wrapped<any>>(renderResult: RenderResult, wrapped: T): VNode | WNode {\n\trenderResult = decorateNodes(renderResult).nodes;\n\tlet nodes: any[] = Array.isArray(renderResult) ? [...renderResult] : [renderResult];\n\twhile (nodes.length) {\n\t\tlet node = nodes.pop();\n\t\tif (isWrappedNode(node)) {\n\t\t\tif (node.id === wrapped.id) {\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\tif (isVNode(node) || isWNode(node)) {\n\t\t\tconst children = node.children || [];\n\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\tif (typeof children[i] === 'function') {\n\t\t\t\t\tchildren[i] = (children[i] as any)();\n\t\t\t\t}\n\t\t\t}\n\t\t\tnodes = [...children, ...nodes];\n\t\t} else if (node && typeof node === 'object') {\n\t\t\tnodes = [\n\t\t\t\t...Object.keys(node).reduce(\n\t\t\t\t\t(newNodes, key) => {\n\t\t\t\t\t\tif (typeof node[key] === 'function') {\n\t\t\t\t\t\t\tconst result = node[key]();\n\t\t\t\t\t\t\tnode[key] = result;\n\t\t\t\t\t\t\treturn Array.isArray(result) ? [...result, ...newNodes] : [result, ...newNodes];\n\t\t\t\t\t\t} else if (typeof node[key] === 'object') {\n\t\t\t\t\t\t\tconst result = node[key];\n\t\t\t\t\t\t\treturn Array.isArray(result) ? [...result, ...newNodes] : [result, ...newNodes];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn newNodes;\n\t\t\t\t\t},\n\t\t\t\t\t[] as any[]\n\t\t\t\t),\n\t\t\t\t...nodes\n\t\t\t];\n\t\t}\n\t}\n\n\tthrow new Error('Unable to find node');\n}\n\nexport interface AssertionResult {\n\t(): DNode | DNode[];\n\tappend<T extends WidgetBaseInterface>(\n\t\ttarget: Wrapped<Constructor<T>>,\n\t\tchildren: TemplateChildren<T['children']>\n\t): AssertionResult;\n\tappend<T extends WidgetFactory>(target: Wrapped<T>, children: TemplateChildren<T['children']>): AssertionResult;\n\tprepend<T extends WidgetBaseInterface>(\n\t\ttarget: Wrapped<Constructor<T>>,\n\t\tchildren: TemplateChildren<T['children']>\n\t): AssertionResult;\n\tprepend<T extends WidgetFactory>(target: Wrapped<T>, children: TemplateChildren<T['children']>): AssertionResult;\n\treplaceChildren<T extends WidgetBaseInterface>(\n\t\ttarget: Wrapped<Constructor<T>>,\n\t\tchildren: TemplateChildren<T['children']>\n\t): AssertionResult;\n\treplaceChildren<T extends WidgetFactory>(\n\t\ttarget: Wrapped<T>,\n\t\tchildren: TemplateChildren<T['children']>\n\t): AssertionResult;\n\tinsertBefore<T extends WidgetBaseInterface>(\n\t\ttarget: Wrapped<Constructor<T>>,\n\t\tchildren: TemplateChildren\n\t): AssertionResult;\n\tinsertBefore<T extends WidgetFactory>(target: Wrapped<T>, children: TemplateChildren): AssertionResult;\n\tinsertAfter<T extends WidgetBaseInterface>(\n\t\ttarget: Wrapped<Constructor<T>>,\n\t\tchildren: TemplateChildren\n\t): AssertionResult;\n\tinsertAfter<T extends WidgetFactory>(target: Wrapped<T>, children: TemplateChildren): AssertionResult;\n\tinsertSiblings<T extends WidgetBaseInterface>(\n\t\ttarget: T,\n\t\tchildren: TemplateChildren,\n\t\ttype?: 'before' | 'after'\n\t): AssertionResult;\n\tsetChildren<T extends WidgetFactory>(\n\t\ttarget: Wrapped<T>,\n\t\tchildren: TemplateChildren<T['children']>,\n\t\ttype?: 'prepend' | 'replace' | 'append'\n\t): AssertionResult;\n\tsetChildren<T extends WidgetBaseInterface>(\n\t\ttarget: Wrapped<Constructor<T>>,\n\t\tchildren: TemplateChildren<T['children']>,\n\t\ttype?: 'prepend' | 'replace' | 'append'\n\t): AssertionResult;\n\tsetProperty<T extends WidgetBaseInterface, K extends keyof T['properties']>(\n\t\twrapped: Wrapped<Constructor<T>>,\n\t\tproperty: K,\n\t\tvalue: Exclude<T['properties'][K], CompareFunc<any>>\n\t): AssertionResult;\n\tsetProperty<T extends WidgetFactory, K extends keyof T['properties']>(\n\t\twrapped: Wrapped<T>,\n\t\tproperty: K,\n\t\tvalue: Exclude<T['properties'][K], CompareFunc<any>>\n\t): AssertionResult;\n\tsetProperties<T extends WidgetBaseInterface>(\n\t\twrapped: Wrapped<Constructor<T>>,\n\t\tvalue: NonComparable<T['properties']> | PropertiesComparatorFunction<NonComparable<T['properties']>>\n\t): AssertionResult;\n\tsetProperties<T extends WidgetFactory>(\n\t\twrapped: Wrapped<T>,\n\t\tvalue: NonComparable<T['properties']> | PropertiesComparatorFunction<NonComparable<T['properties']>>\n\t): AssertionResult;\n\tgetChildren<T extends WidgetBaseInterface>(target: Wrapped<Constructor<T>>): T['children'];\n\tgetChildren<T extends WidgetFactory>(target: Wrapped<T>): T['children'];\n\tgetProperty<T extends WidgetBaseInterface, K extends keyof T['properties']>(\n\t\ttarget: Wrapped<Constructor<T>>,\n\t\tproperty: K\n\t): Exclude<T['properties'][K], CompareFunc<any>>;\n\tgetProperty<T extends WidgetFactory, K extends keyof T['properties']>(\n\t\ttarget: Wrapped<T>,\n\t\tproperty: K\n\t): Exclude<T['properties'][K], CompareFunc<any>>;\n\tgetProperties<T extends WidgetBaseInterface>(target: Wrapped<Constructor<T>>): NonComparable<T['properties']>;\n\tgetProperties<T extends WidgetFactory>(target: Wrapped<T>): NonComparable<T['properties']>;\n\treplace<T extends WidgetBaseInterface>(target: Wrapped<Constructor<T>>, node: DNode): AssertionResult;\n\treplace<T extends WidgetFactory>(target: Wrapped<T>, node: DNode): AssertionResult;\n\tremove<T extends WidgetBaseInterface>(target: Wrapped<Constructor<T>>): AssertionResult;\n\tremove<T extends WidgetFactory>(target: Wrapped<T>): AssertionResult;\n}\n\ntype NodeWithProperties = (VNode | WNode) & { properties: { [index: string]: any } };\n\nconst replaceChildren = (\n\twrapped: Wrapped<any>,\n\trender: DNode | DNode[],\n\tmodifyChildrenFn: (index: number, children: DNode[]) => DNode[]\n): DNode | DNode[] => {\n\tconst node = findNode(render, wrapped);\n\tconst parent: (VNode | WNode) & { children: DNode[] } | undefined = (node as any).parent;\n\tconst siblings = parent ? parent.children : Array.isArray(render) ? render : [render];\n\tconst newChildren = modifyChildrenFn(siblings.indexOf(node), [...siblings]);\n\n\tif (!parent) {\n\t\treturn newChildren;\n\t}\n\n\tparent.children = newChildren;\n\treturn render;\n};\n\nexport function assertion(renderFunc: () => DNode | DNode[]) {\n\tconst assertionResult: any = () => {\n\t\tconst render = renderFunc();\n\t\tcoreDecorate(render, (node) => {\n\t\t\tif (isWNode(node) || isVNode(node)) {\n\t\t\t\tdelete (node as NodeWithProperties).properties['~key'];\n\t\t\t\tdelete (node as NodeWithProperties).properties['assertion-key'];\n\t\t\t}\n\t\t});\n\t\treturn render;\n\t};\n\tassertionResult.setProperty = (wrapped: Wrapped<any>, property: string, value: any) => {\n\t\treturn assertion(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst node = findNode(render, wrapped);\n\t\t\tnode.properties[property] = value;\n\t\t\treturn render;\n\t\t});\n\t};\n\tassertionResult.setProperties = (wrapped: Wrapped<any>, value: any | PropertiesComparatorFunction) => {\n\t\treturn assertion(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst node = findNode(render, wrapped);\n\t\t\tnode.properties = value;\n\t\t\treturn render;\n\t\t});\n\t};\n\tassertionResult.append = (wrapped: Wrapped<any>, children: TemplateChildren) => {\n\t\treturn assertionResult.setChildren(wrapped, children, 'append');\n\t};\n\tassertionResult.prepend = (wrapped: Wrapped<any>, children: TemplateChildren) => {\n\t\treturn assertionResult.setChildren(wrapped, children, 'prepend');\n\t};\n\tassertionResult.replaceChildren = (wrapped: Wrapped<any>, children: TemplateChildren) => {\n\t\treturn assertionResult.setChildren(wrapped, children, 'replace');\n\t};\n\tassertionResult.setChildren = (\n\t\twrapped: Wrapped<any>,\n\t\tchildren: TemplateChildren,\n\t\ttype: 'prepend' | 'replace' | 'append' = 'replace'\n\t) => {\n\t\treturn assertion(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst node = findNode(render, wrapped);\n\t\t\tnode.children = node.children || [];\n\t\t\tlet childrenResult = children();\n\t\t\tif (!Array.isArray(childrenResult)) {\n\t\t\t\tchildrenResult = [childrenResult];\n\t\t\t}\n\t\t\tswitch (type) {\n\t\t\t\tcase 'prepend':\n\t\t\t\t\tnode.children = [...childrenResult, ...node.children];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'append':\n\t\t\t\t\tnode.children = [...node.children, ...childrenResult];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'replace':\n\t\t\t\t\tnode.children = [...childrenResult];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn render;\n\t\t});\n\t};\n\tassertionResult.insertBefore = (wrapped: Wrapped<any>, children: TemplateChildren) => {\n\t\treturn assertionResult.insertSiblings(wrapped, children, 'before');\n\t};\n\tassertionResult.insertAfter = (wrapped: Wrapped<any>, children: TemplateChildren) => {\n\t\treturn assertionResult.insertSiblings(wrapped, children, 'after');\n\t};\n\tassertionResult.insertSiblings = (\n\t\twrapped: Wrapped<any>,\n\t\tchildren: TemplateChildren,\n\t\ttype: 'before' | 'after' = 'after'\n\t) => {\n\t\treturn assertion(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst insertedChildren = typeof children === 'function' ? children() : children;\n\t\t\treturn replaceChildren(wrapped, render, (index, children) => {\n\t\t\t\tif (type === 'after') {\n\t\t\t\t\tchildren.splice(index + 1, 0, ...insertedChildren);\n\t\t\t\t} else {\n\t\t\t\t\tchildren.splice(index, 0, ...insertedChildren);\n\t\t\t\t}\n\t\t\t\treturn children;\n\t\t\t});\n\t\t});\n\t};\n\tassertionResult.getProperty = (wrapped: Wrapped<any>, property: string) => {\n\t\tconst render = renderFunc();\n\t\tconst node = findNode(render, wrapped);\n\t\treturn node.properties[property];\n\t};\n\tassertionResult.getProperties = (wrapped: Wrapped<any>) => {\n\t\tconst render = renderFunc();\n\t\tconst node = findNode(render, wrapped);\n\t\treturn node.properties;\n\t};\n\tassertionResult.getChildren = (wrapped: Wrapped<any>) => {\n\t\tconst render = renderFunc();\n\t\tconst node = findNode(render, wrapped);\n\t\treturn node.children || [];\n\t};\n\tassertionResult.replace = (wrapped: Wrapped<any>, newNode: DNode) => {\n\t\treturn assertion(() => {\n\t\t\tconst render = renderFunc();\n\t\t\treturn replaceChildren(wrapped, render, (index, children) => {\n\t\t\t\tchildren.splice(index, 1, newNode);\n\t\t\t\treturn children;\n\t\t\t});\n\t\t});\n\t};\n\tassertionResult.remove = (wrapped: Wrapped<any>) => {\n\t\treturn assertion(() => {\n\t\t\tconst render = renderFunc();\n\t\t\treturn replaceChildren(wrapped, render, (index, children) => {\n\t\t\t\tchildren.splice(index, 1);\n\t\t\t\treturn children;\n\t\t\t});\n\t\t});\n\t};\n\treturn assertionResult as AssertionResult;\n}\n\nexport function wrap(\n\tnode: string\n): Wrapped<OptionalWNodeFactory<{ properties: Comparable<VNodeProperties>; children: DNode | (DNode | DNode[])[] }>> & {\n\ttag: string;\n};\nexport function wrap<T extends WidgetBaseInterface>(\n\tnode: Constructor<T>\n): Wrapped<Constructor<WidgetBase<Comparable<T['properties']>>>>;\nexport function wrap<T extends OptionalWNodeFactory<any>>(\n\tnode: T\n): Wrapped<OptionalWNodeFactory<{ properties: Comparable<T['properties']>; children: T['children'] }>>;\nexport function wrap<T extends DefaultChildrenWNodeFactory<any>>(\n\tnode: T\n): Wrapped<DefaultChildrenWNodeFactory<{ properties: Comparable<T['properties']>; children: T['children'] }>>;\nexport function wrap<T extends WNodeFactory<any>>(\n\tnode: T\n): Wrapped<WNodeFactory<{ properties: Comparable<T['properties']>; children: T['children'] }>>;\nexport function wrap(node: any): any {\n\tconst id = uuid();\n\tconst nodeFactory: any = (properties: any, children: any[]) => {\n\t\tconst dNode: any =\n\t\t\ttypeof node === 'string' ? v(node, properties, children) : w(node as any, properties, children);\n\t\tdNode.id = id;\n\t\treturn dNode;\n\t};\n\tnodeFactory.id = id;\n\tnodeFactory.isFactory = true;\n\tif (typeof node === 'string') {\n\t\tnodeFactory.tag = nodeFactory;\n\t}\n\treturn nodeFactory;\n}\n\nexport function ignore(\n\tnode: string\n): OptionalWNodeFactory<{ properties: Comparable<VNodeProperties>; children: DNode | (DNode | DNode[])[] }> & {\n\ttag: string;\n};\nexport function ignore<T extends WidgetBaseInterface>(\n\tnode: Constructor<T>\n): Constructor<WidgetBase<Comparable<T['properties']>>>;\nexport function ignore<T extends OptionalWNodeFactory<any>>(\n\tnode: T\n): OptionalWNodeFactory<{ properties: Comparable<T['properties']>; children: T['children'] }>;\nexport function ignore<T extends DefaultChildrenWNodeFactory<any>>(\n\tnode: T\n): DefaultChildrenWNodeFactory<{ properties: Comparable<T['properties']>; children: T['children'] }>;\nexport function ignore<T extends WNodeFactory<any>>(\n\tnode: T\n): WNodeFactory<{ properties: Comparable<T['properties']>; children: T['children'] }>;\nexport function ignore(node: any): any {\n\tconst nodeFactory: any = (properties: any, children: any[]) => {\n\t\tconst dNode: any =\n\t\t\ttypeof node === 'string' ? v(node, properties, children) : w(node as any, properties, children);\n\t\tdNode.isIgnore = true;\n\t\treturn dNode;\n\t};\n\n\tnodeFactory.isFactory = true;\n\tif (typeof node === 'string') {\n\t\tnodeFactory.tag = nodeFactory;\n\t}\n\treturn nodeFactory;\n}\n\nexport function compare(compareFunc: (actual: unknown, expected: unknown) => boolean): CompareFunc<unknown> {\n\t(compareFunc as any).type = 'compare';\n\treturn compareFunc as any;\n}\n\nexport interface Expect {\n\t(expectedRenderFunc: AssertionResult): void;\n}\n\nexport interface RendererAPI {\n\texpect: Expect;\n\tchild: Child;\n\tproperty: Property;\n}\n\nconst factory = create();\n\nexport function renderer(renderFunc: () => WNode, options: RendererOptions = {}): RendererAPI {\n\tlet invalidated = true;\n\tlet wNode = renderFunc();\n\tlet expectedRenderResult: RenderResult;\n\tlet renderResult: RenderResult;\n\tlet widget: WidgetBase | Callback<any, any, any, RenderResult>;\n\tlet middleware: any = {};\n\tlet properties: any = {};\n\tlet children: any = [];\n\tlet customDiffs: [string, Function][] = [];\n\tlet customDiffNames: string[] = [];\n\tlet childInstructions = new Map<string, ChildInstruction>();\n\tlet propertyInstructions: PropertyInstruction[] = [];\n\tlet mockMiddleware = options.middleware || [];\n\n\tif (isWidgetFunction(wNode.widgetConstructor)) {\n\t\twidget = wNode.widgetConstructor;\n\n\t\tconst resolveMiddleware = (middlewares: any, mocks: any[]) => {\n\t\t\tconst keys = Object.keys(middlewares);\n\t\t\tconst results: any = {};\n\t\t\tconst uniqueId = uuid();\n\t\t\tconst mockMiddlewareMap = new Map(mocks);\n\n\t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\t\tlet isMock = false;\n\t\t\t\tlet middleware = middlewares[keys[i]]();\n\t\t\t\tif (mockMiddlewareMap.has(middlewares[keys[i]])) {\n\t\t\t\t\tmiddleware = mockMiddlewareMap.get(middlewares[keys[i]]);\n\t\t\t\t\tisMock = true;\n\t\t\t\t}\n\t\t\t\tconst payload: any = {\n\t\t\t\t\tid: uniqueId,\n\t\t\t\t\tproperties: () => {\n\t\t\t\t\t\treturn { ...properties };\n\t\t\t\t\t},\n\t\t\t\t\tchildren: () => {\n\t\t\t\t\t\treturn children;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif (middleware.middlewares) {\n\t\t\t\t\tconst resolvedMiddleware = resolveMiddleware(middleware.middlewares, mocks);\n\t\t\t\t\tpayload.middleware = resolvedMiddleware;\n\t\t\t\t\tresults[keys[i]] = middleware.callback(payload);\n\t\t\t\t} else {\n\t\t\t\t\tif (isMock) {\n\t\t\t\t\t\tlet result = middleware();\n\t\t\t\t\t\tconst resolvedMiddleware = resolveMiddleware(result.middlewares, mocks);\n\t\t\t\t\t\tpayload.middleware = resolvedMiddleware;\n\t\t\t\t\t\tresults[keys[i]] = result.callback(payload);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresults[keys[i]] = middleware.callback(payload);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\t\tmockMiddleware.push([\n\t\t\tinvalidator,\n\t\t\tfactory(() => () => {\n\t\t\t\tinvalidated = true;\n\t\t\t})\n\t\t]);\n\t\tmockMiddleware.push([destroy, factory(() => () => {})]);\n\t\tmockMiddleware.push([\n\t\t\tdiffProperty,\n\t\t\tfactory(() => (propName: string, propertiesOrDiff: Function, diff?: Function) => {\n\t\t\t\tconst diffFunction = diff || propertiesOrDiff;\n\t\t\t\tif (customDiffNames.indexOf(propName) === -1) {\n\t\t\t\t\tcustomDiffNames.push(propName);\n\t\t\t\t\tcustomDiffs.push([propName, diffFunction]);\n\t\t\t\t\tconst result = diffFunction({}, properties);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tproperties = { ...properties, [propName]: result };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t]);\n\t\tmiddleware = resolveMiddleware((wNode.widgetConstructor as any).middlewares, mockMiddleware);\n\t} else {\n\t\tconst widgetConstructor = wNode.widgetConstructor as Constructor<WidgetBase>;\n\t\tif (typeof widgetConstructor === 'function') {\n\t\t\twidget = new class extends widgetConstructor {\n\t\t\t\tinvalidate() {\n\t\t\t\t\tinvalidated = true;\n\t\t\t\t\tsuper.invalidate();\n\t\t\t\t}\n\t\t\t}();\n\t\t\t_tryRender();\n\t\t} else {\n\t\t\tthrow new Error('Renderer does not support registry items');\n\t\t}\n\t}\n\n\tfunction _tryRender() {\n\t\tlet render: RenderResult;\n\t\tconst wNode = renderFunc();\n\t\tif (isWidgetFunction(widget)) {\n\t\t\tfor (let i = 0; i < customDiffs.length; i++) {\n\t\t\t\tconst [name, diff] = customDiffs[i];\n\t\t\t\tconst result = diff(properties, wNode.properties);\n\t\t\t\tif (result) {\n\t\t\t\t\twNode.properties = { ...wNode.properties, [name]: result };\n\t\t\t\t}\n\t\t\t}\n\t\t\tpropertiesDiff(\n\t\t\t\tproperties,\n\t\t\t\twNode.properties,\n\t\t\t\t() => {\n\t\t\t\t\tinvalidated = true;\n\t\t\t\t},\n\t\t\t\t[...customDiffNames]\n\t\t\t);\n\t\t\tif (children.length || wNode.children.length) {\n\t\t\t\tinvalidated = true;\n\t\t\t}\n\t\t\tproperties = { ...wNode.properties };\n\t\t\tchildren = wNode.children;\n\t\t\tif (invalidated) {\n\t\t\t\trender = widget({ id: 'test', middleware, properties: () => properties, children: () => children });\n\t\t\t}\n\t\t} else {\n\t\t\twidget.__setProperties__(wNode.properties);\n\t\t\twidget.__setChildren__(wNode.children);\n\t\t\tif (invalidated) {\n\t\t\t\trender = widget.__render__();\n\t\t\t}\n\t\t}\n\t\tif (invalidated) {\n\t\t\tlet { hasDeferredProperties, nodes } = decorateNodes(render);\n\t\t\tif (hasDeferredProperties) {\n\t\t\t\tnodes = decorateNodes(render).nodes;\n\t\t\t}\n\t\t\trenderResult = nodes;\n\t\t\tinvalidated = false;\n\t\t}\n\t}\n\n\tfunction _expect(expectedRenderFunc: AssertionResult) {\n\t\tif (expectedRenderResult && propertyInstructions.length > 0) {\n\t\t\tpropertyInstructions.forEach((instruction) => {\n\t\t\t\tdecorate(renderResult, expectedRenderResult, new Map([[instruction.id, instruction]]));\n\t\t\t});\n\n\t\t\tpropertyInstructions = [];\n\t\t}\n\n\t\t_tryRender();\n\t\texpectedRenderResult = expectedRenderFunc();\n\t\texpectedRenderResult = decorateNodes(expectedRenderResult).nodes;\n\t\tdecorate(renderResult, expectedRenderResult, childInstructions);\n\t\tassertRender(renderResult, expectedRenderResult);\n\t}\n\n\treturn {\n\t\tchild(wrapped: any, params: any) {\n\t\t\tchildInstructions.set(wrapped.id, { wrapped, params, type: 'child' });\n\t\t\tinvalidated = true;\n\t\t},\n\t\tproperty(wrapped: any, key: any, ...params: any[]) {\n\t\t\tif (!expectedRenderResult) {\n\t\t\t\tthrow new Error('To use `.property` please perform an initial expect');\n\t\t\t}\n\t\t\tpropertyInstructions.push({ id: wrapped.id, wrapped, params, type: 'property', key });\n\t\t},\n\t\texpect(expectedRenderFunc: AssertionResult) {\n\t\t\treturn _expect(expectedRenderFunc);\n\t\t}\n\t};\n}\n\nexport default renderer;\n"]}