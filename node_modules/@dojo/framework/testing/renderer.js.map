{"version":3,"file":"renderer.js","sourceRoot":"","sources":["renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import assertRender from './assertRender';\nimport {\n\tWNode,\n\tDNode,\n\tConstructor,\n\tCallback,\n\tRenderResult,\n\tMiddlewareResultFactory,\n\tWNodeFactory,\n\tVNodeProperties,\n\tOptionalWNodeFactory,\n\tWidgetBaseInterface,\n\tDefaultChildrenWNodeFactory,\n\tVNode,\n\tDefaultMiddlewareResult\n} from '../core/interfaces';\nimport { WidgetBase } from '../core/WidgetBase';\nimport { isWidgetFunction } from '../core/Registry';\nimport { invalidator, diffProperty, destroy, create, propertiesDiff, w, v, isVNode, isWNode } from '../core/vdom';\nimport { uuid } from '../core/util';\nimport decorate, { decorateNodes } from './decorate';\nimport { decorate as coreDecorate } from '../core/util';\nimport { Wrapped, WidgetFactory, CompareFunc, Comparable, NonComparable } from './interfaces';\n\nexport interface ChildInstruction {\n\ttype: 'child';\n\twrapped: Wrapped<any>;\n\tparams: any;\n}\n\nexport interface PropertyInstruction {\n\ttype: 'property';\n\tid: string;\n\tkey: string;\n\twrapped: Wrapped<any>;\n\tparams: any;\n}\n\nexport type Instruction = ChildInstruction | PropertyInstruction;\n\nexport interface Child {\n\t<T extends WNodeFactory<{ properties: any; children: any }>>(\n\t\twrapped: Wrapped<T>,\n\t\tparams: T['children'] extends { [index: string]: any }\n\t\t\t? {\n\t\t\t\t\t[P in keyof T['children']]?: Parameters<T['children'][P]> extends never\n\t\t\t\t\t\t? []\n\t\t\t\t\t\t: Parameters<T['children'][P]>\n\t\t\t  }\n\t\t\t: T['children'] extends (...args: any[]) => RenderResult ? Parameters<T['children']> : never\n\t): void;\n}\n\nexport type KnownKeys<T> = { [K in keyof T]: string extends K ? never : number extends K ? never : K } extends {\n\t[_ in keyof T]: infer U\n}\n\t? U\n\t: never;\nexport type FunctionPropertyNames<T> = {\n\t[K in keyof T]: T[K] extends ((...args: any[]) => any | undefined) ? K : never\n}[keyof T];\nexport type RequiredVNodeProperties = Required<Pick<VNodeProperties, KnownKeys<VNodeProperties>>>;\n\nexport interface Property {\n\t<T extends WidgetBase<any>, K extends FunctionPropertyNames<Required<T['properties']>>>(\n\t\twrapped: Wrapped<Constructor<T>>,\n\t\tkey: K,\n\t\t...params: Parameters<Exclude<T['properties'][K], CompareFunc<any>>>\n\t): void;\n\t<\n\t\tT extends OptionalWNodeFactory<{ properties: Comparable<VNodeProperties>; children: any }>,\n\t\tK extends FunctionPropertyNames<RequiredVNodeProperties>\n\t>(\n\t\twrapped: Wrapped<T>,\n\t\tkey: K,\n\t\t...params: any[]\n\t): void;\n\t<T extends WidgetFactory, K extends FunctionPropertyNames<Required<T['properties']>>>(\n\t\twrapped: Wrapped<T>,\n\t\tkey: K,\n\t\t...params: Parameters<Exclude<T['properties'][K], CompareFunc<any>>>\n\t): void;\n}\n\ninterface RendererOptions {\n\tmiddleware?: [MiddlewareResultFactory<any, any, any, any>, () => DefaultMiddlewareResult][];\n}\n\nexport type PropertiesComparatorFunction<T = any> = (actualProperties: T) => T;\n\nexport type TemplateChildren<T = DNode[]> = () => T;\n\nexport interface DecoratorResult<T> {\n\thasDeferredProperties: boolean;\n\tnodes: T;\n}\n\nfunction isWrappedNode(value: any): value is (WNode & { id: string }) | (WNode & { id: string }) {\n\treturn Boolean(value && value.id && (isWNode(value) || isVNode(value)));\n}\n\nfunction findNode<T extends Wrapped<any>>(renderResult: RenderResult, wrapped: T): VNode | WNode {\n\trenderResult = decorateNodes(renderResult).nodes;\n\tlet nodes: any[] = Array.isArray(renderResult) ? [...renderResult] : [renderResult];\n\twhile (nodes.length) {\n\t\tlet node = nodes.pop();\n\t\tif (isWrappedNode(node)) {\n\t\t\tif (node.id === wrapped.id) {\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\tif (isVNode(node) || isWNode(node)) {\n\t\t\tconst children = node.children || [];\n\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\tif (typeof children[i] === 'function') {\n\t\t\t\t\tchildren[i] = (children[i] as any)();\n\t\t\t\t}\n\t\t\t}\n\t\t\tnodes = [...children, ...nodes];\n\t\t} else if (node && typeof node === 'object') {\n\t\t\tnodes = [\n\t\t\t\t...Object.keys(node).reduce(\n\t\t\t\t\t(newNodes, key) => {\n\t\t\t\t\t\tif (typeof node[key] === 'function') {\n\t\t\t\t\t\t\tconst result = node[key]();\n\t\t\t\t\t\t\tnode[key] = result;\n\t\t\t\t\t\t\treturn Array.isArray(result) ? [...result, ...newNodes] : [result, ...newNodes];\n\t\t\t\t\t\t} else if (typeof node[key] === 'object') {\n\t\t\t\t\t\t\tconst result = node[key];\n\t\t\t\t\t\t\treturn Array.isArray(result) ? [...result, ...newNodes] : [result, ...newNodes];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn newNodes;\n\t\t\t\t\t},\n\t\t\t\t\t[] as any[]\n\t\t\t\t),\n\t\t\t\t...nodes\n\t\t\t];\n\t\t}\n\t}\n\n\tthrow new Error('Unable to find node');\n}\n\nexport interface AssertionResult {\n\t(): DNode | DNode[];\n\tappend<T extends WidgetBaseInterface>(\n\t\ttarget: Wrapped<Constructor<T>>,\n\t\tchildren: TemplateChildren<T['children']>\n\t): AssertionResult;\n\tappend<T extends WidgetFactory>(target: Wrapped<T>, children: TemplateChildren<T['children']>): AssertionResult;\n\tprepend<T extends WidgetBaseInterface>(\n\t\ttarget: Wrapped<Constructor<T>>,\n\t\tchildren: TemplateChildren<T['children']>\n\t): AssertionResult;\n\tprepend<T extends WidgetFactory>(target: Wrapped<T>, children: TemplateChildren<T['children']>): AssertionResult;\n\treplaceChildren<T extends WidgetBaseInterface>(\n\t\ttarget: Wrapped<Constructor<T>>,\n\t\tchildren: TemplateChildren<T['children']>\n\t): AssertionResult;\n\treplaceChildren<T extends WidgetFactory>(\n\t\ttarget: Wrapped<T>,\n\t\tchildren: TemplateChildren<T['children']>\n\t): AssertionResult;\n\tinsertBefore<T extends WidgetBaseInterface>(\n\t\ttarget: Wrapped<Constructor<T>>,\n\t\tchildren: TemplateChildren\n\t): AssertionResult;\n\tinsertBefore<T extends WidgetFactory>(target: Wrapped<T>, children: TemplateChildren): AssertionResult;\n\tinsertAfter<T extends WidgetBaseInterface>(\n\t\ttarget: Wrapped<Constructor<T>>,\n\t\tchildren: TemplateChildren\n\t): AssertionResult;\n\tinsertAfter<T extends WidgetFactory>(target: Wrapped<T>, children: TemplateChildren): AssertionResult;\n\tinsertSiblings<T extends WidgetBaseInterface>(\n\t\ttarget: T,\n\t\tchildren: TemplateChildren,\n\t\ttype?: 'before' | 'after'\n\t): AssertionResult;\n\tsetChildren<T extends WidgetFactory>(\n\t\ttarget: Wrapped<T>,\n\t\tchildren: TemplateChildren<T['children']>,\n\t\ttype?: 'prepend' | 'replace' | 'append'\n\t): AssertionResult;\n\tsetChildren<T extends WidgetBaseInterface>(\n\t\ttarget: Wrapped<Constructor<T>>,\n\t\tchildren: TemplateChildren<T['children']>,\n\t\ttype?: 'prepend' | 'replace' | 'append'\n\t): AssertionResult;\n\tsetProperty<T extends WidgetBaseInterface, K extends keyof T['properties']>(\n\t\twrapped: Wrapped<Constructor<T>>,\n\t\tproperty: K,\n\t\tvalue: Exclude<T['properties'][K], CompareFunc<any>>\n\t): AssertionResult;\n\tsetProperty<T extends WidgetFactory, K extends keyof T['properties']>(\n\t\twrapped: Wrapped<T>,\n\t\tproperty: K,\n\t\tvalue: Exclude<T['properties'][K], CompareFunc<any>>\n\t): AssertionResult;\n\tsetProperties<T extends WidgetBaseInterface>(\n\t\twrapped: Wrapped<Constructor<T>>,\n\t\tvalue: NonComparable<T['properties']> | PropertiesComparatorFunction<NonComparable<T['properties']>>\n\t): AssertionResult;\n\tsetProperties<T extends WidgetFactory>(\n\t\twrapped: Wrapped<T>,\n\t\tvalue: NonComparable<T['properties']> | PropertiesComparatorFunction<NonComparable<T['properties']>>\n\t): AssertionResult;\n\tgetChildren<T extends WidgetBaseInterface>(target: Wrapped<Constructor<T>>): T['children'];\n\tgetChildren<T extends WidgetFactory>(target: Wrapped<T>): T['children'];\n\tgetProperty<T extends WidgetBaseInterface, K extends keyof T['properties']>(\n\t\ttarget: Wrapped<Constructor<T>>,\n\t\tproperty: K\n\t): Exclude<T['properties'][K], CompareFunc<any>>;\n\tgetProperty<T extends WidgetFactory, K extends keyof T['properties']>(\n\t\ttarget: Wrapped<T>,\n\t\tproperty: K\n\t): Exclude<T['properties'][K], CompareFunc<any>>;\n\tgetProperties<T extends WidgetBaseInterface>(target: Wrapped<Constructor<T>>): NonComparable<T['properties']>;\n\tgetProperties<T extends WidgetFactory>(target: Wrapped<T>): NonComparable<T['properties']>;\n\treplace<T extends WidgetBaseInterface>(target: Wrapped<Constructor<T>>, node: DNode): AssertionResult;\n\treplace<T extends WidgetFactory>(target: Wrapped<T>, node: DNode): AssertionResult;\n\tremove<T extends WidgetBaseInterface>(target: Wrapped<Constructor<T>>): AssertionResult;\n\tremove<T extends WidgetFactory>(target: Wrapped<T>): AssertionResult;\n}\n\ntype NodeWithProperties = (VNode | WNode) & { properties: { [index: string]: any } };\n\nconst replaceChildren = (\n\twrapped: Wrapped<any>,\n\trender: DNode | DNode[],\n\tmodifyChildrenFn: (index: number, children: DNode[]) => DNode[]\n): DNode | DNode[] => {\n\tconst node = findNode(render, wrapped);\n\tconst parent: (VNode | WNode) & { children: DNode[] } | undefined = (node as any).parent;\n\tconst siblings = parent ? parent.children : Array.isArray(render) ? render : [render];\n\tconst newChildren = modifyChildrenFn(siblings.indexOf(node), [...siblings]);\n\n\tif (!parent) {\n\t\treturn newChildren;\n\t}\n\n\tparent.children = newChildren;\n\treturn render;\n};\n\nexport function assertion(renderFunc: () => DNode | DNode[]) {\n\tconst assertionResult: any = () => {\n\t\tconst render = renderFunc();\n\t\tcoreDecorate(render, (node) => {\n\t\t\tif (isWNode(node) || isVNode(node)) {\n\t\t\t\tdelete (node as NodeWithProperties).properties['~key'];\n\t\t\t\tdelete (node as NodeWithProperties).properties['assertion-key'];\n\t\t\t}\n\t\t});\n\t\treturn render;\n\t};\n\tassertionResult.setProperty = (wrapped: Wrapped<any>, property: string, value: any) => {\n\t\treturn assertion(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst node = findNode(render, wrapped);\n\t\t\tnode.properties[property] = value;\n\t\t\treturn render;\n\t\t});\n\t};\n\tassertionResult.setProperties = (wrapped: Wrapped<any>, value: any | PropertiesComparatorFunction) => {\n\t\treturn assertion(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst node = findNode(render, wrapped);\n\t\t\tnode.properties = value;\n\t\t\treturn render;\n\t\t});\n\t};\n\tassertionResult.append = (wrapped: Wrapped<any>, children: TemplateChildren) => {\n\t\treturn assertionResult.setChildren(wrapped, children, 'append');\n\t};\n\tassertionResult.prepend = (wrapped: Wrapped<any>, children: TemplateChildren) => {\n\t\treturn assertionResult.setChildren(wrapped, children, 'prepend');\n\t};\n\tassertionResult.replaceChildren = (wrapped: Wrapped<any>, children: TemplateChildren) => {\n\t\treturn assertionResult.setChildren(wrapped, children, 'replace');\n\t};\n\tassertionResult.setChildren = (\n\t\twrapped: Wrapped<any>,\n\t\tchildren: TemplateChildren,\n\t\ttype: 'prepend' | 'replace' | 'append' = 'replace'\n\t) => {\n\t\treturn assertion(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst node = findNode(render, wrapped);\n\t\t\tnode.children = node.children || [];\n\t\t\tlet childrenResult = children();\n\t\t\tif (!Array.isArray(childrenResult)) {\n\t\t\t\tchildrenResult = [childrenResult];\n\t\t\t}\n\t\t\tswitch (type) {\n\t\t\t\tcase 'prepend':\n\t\t\t\t\tnode.children = [...childrenResult, ...node.children];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'append':\n\t\t\t\t\tnode.children = [...node.children, ...childrenResult];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'replace':\n\t\t\t\t\tnode.children = [...childrenResult];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn render;\n\t\t});\n\t};\n\tassertionResult.insertBefore = (wrapped: Wrapped<any>, children: TemplateChildren) => {\n\t\treturn assertionResult.insertSiblings(wrapped, children, 'before');\n\t};\n\tassertionResult.insertAfter = (wrapped: Wrapped<any>, children: TemplateChildren) => {\n\t\treturn assertionResult.insertSiblings(wrapped, children, 'after');\n\t};\n\tassertionResult.insertSiblings = (\n\t\twrapped: Wrapped<any>,\n\t\tchildren: TemplateChildren,\n\t\ttype: 'before' | 'after' = 'after'\n\t) => {\n\t\treturn assertion(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst insertedChildren = typeof children === 'function' ? children() : children;\n\t\t\treturn replaceChildren(wrapped, render, (index, children) => {\n\t\t\t\tif (type === 'after') {\n\t\t\t\t\tchildren.splice(index + 1, 0, ...insertedChildren);\n\t\t\t\t} else {\n\t\t\t\t\tchildren.splice(index, 0, ...insertedChildren);\n\t\t\t\t}\n\t\t\t\treturn children;\n\t\t\t});\n\t\t});\n\t};\n\tassertionResult.getProperty = (wrapped: Wrapped<any>, property: string) => {\n\t\tconst render = renderFunc();\n\t\tconst node = findNode(render, wrapped);\n\t\treturn node.properties[property];\n\t};\n\tassertionResult.getProperties = (wrapped: Wrapped<any>) => {\n\t\tconst render = renderFunc();\n\t\tconst node = findNode(render, wrapped);\n\t\treturn node.properties;\n\t};\n\tassertionResult.getChildren = (wrapped: Wrapped<any>) => {\n\t\tconst render = renderFunc();\n\t\tconst node = findNode(render, wrapped);\n\t\treturn node.children || [];\n\t};\n\tassertionResult.replace = (wrapped: Wrapped<any>, newNode: DNode) => {\n\t\treturn assertion(() => {\n\t\t\tconst render = renderFunc();\n\t\t\treturn replaceChildren(wrapped, render, (index, children) => {\n\t\t\t\tchildren.splice(index, 1, newNode);\n\t\t\t\treturn children;\n\t\t\t});\n\t\t});\n\t};\n\tassertionResult.remove = (wrapped: Wrapped<any>) => {\n\t\treturn assertion(() => {\n\t\t\tconst render = renderFunc();\n\t\t\treturn replaceChildren(wrapped, render, (index, children) => {\n\t\t\t\tchildren.splice(index, 1);\n\t\t\t\treturn children;\n\t\t\t});\n\t\t});\n\t};\n\treturn assertionResult as AssertionResult;\n}\n\nexport function wrap(\n\tnode: string\n): Wrapped<OptionalWNodeFactory<{ properties: Comparable<VNodeProperties>; children: DNode | (DNode | DNode[])[] }>> & {\n\ttag: string;\n};\nexport function wrap<T extends WidgetBaseInterface>(\n\tnode: Constructor<T>\n): Wrapped<Constructor<WidgetBase<Comparable<T['properties']>>>>;\nexport function wrap<T extends OptionalWNodeFactory<any>>(\n\tnode: T\n): Wrapped<OptionalWNodeFactory<{ properties: Comparable<T['properties']>; children: T['children'] }>>;\nexport function wrap<T extends DefaultChildrenWNodeFactory<any>>(\n\tnode: T\n): Wrapped<DefaultChildrenWNodeFactory<{ properties: Comparable<T['properties']>; children: T['children'] }>>;\nexport function wrap<T extends WNodeFactory<any>>(\n\tnode: T\n): Wrapped<WNodeFactory<{ properties: Comparable<T['properties']>; children: T['children'] }>>;\nexport function wrap(node: any): any {\n\tconst id = uuid();\n\tconst nodeFactory: any = (properties: any, children: any[]) => {\n\t\tconst dNode: any =\n\t\t\ttypeof node === 'string' ? v(node, properties, children) : w(node as any, properties, children);\n\t\tdNode.id = id;\n\t\treturn dNode;\n\t};\n\tnodeFactory.id = id;\n\tnodeFactory.isFactory = true;\n\tif (typeof node === 'string') {\n\t\tnodeFactory.tag = nodeFactory;\n\t}\n\treturn nodeFactory;\n}\n\nexport function ignore(\n\tnode: string\n): OptionalWNodeFactory<{ properties: Comparable<VNodeProperties>; children: DNode | (DNode | DNode[])[] }> & {\n\ttag: string;\n};\nexport function ignore<T extends WidgetBaseInterface>(\n\tnode: Constructor<T>\n): Constructor<WidgetBase<Comparable<T['properties']>>>;\nexport function ignore<T extends OptionalWNodeFactory<any>>(\n\tnode: T\n): OptionalWNodeFactory<{ properties: Comparable<T['properties']>; children: T['children'] }>;\nexport function ignore<T extends DefaultChildrenWNodeFactory<any>>(\n\tnode: T\n): DefaultChildrenWNodeFactory<{ properties: Comparable<T['properties']>; children: T['children'] }>;\nexport function ignore<T extends WNodeFactory<any>>(\n\tnode: T\n): WNodeFactory<{ properties: Comparable<T['properties']>; children: T['children'] }>;\nexport function ignore(node: any): any {\n\tconst nodeFactory: any = (properties: any, children: any[]) => {\n\t\tconst dNode: any =\n\t\t\ttypeof node === 'string' ? v(node, properties, children) : w(node as any, properties, children);\n\t\tdNode.isIgnore = true;\n\t\treturn dNode;\n\t};\n\n\tnodeFactory.isFactory = true;\n\tif (typeof node === 'string') {\n\t\tnodeFactory.tag = nodeFactory;\n\t}\n\treturn nodeFactory;\n}\n\nexport function compare(compareFunc: (actual: unknown, expected: unknown) => boolean): CompareFunc<unknown> {\n\t(compareFunc as any).type = 'compare';\n\treturn compareFunc as any;\n}\n\nexport interface Expect {\n\t(expectedRenderFunc: AssertionResult): void;\n}\n\nexport interface RendererAPI {\n\texpect: Expect;\n\tchild: Child;\n\tproperty: Property;\n}\n\nconst factory = create();\n\nexport function renderer(renderFunc: () => WNode, options: RendererOptions = {}): RendererAPI {\n\tlet invalidated = true;\n\tlet wNode = renderFunc();\n\tlet expectedRenderResult: RenderResult;\n\tlet renderResult: RenderResult;\n\tlet widget: WidgetBase | Callback<any, any, any, RenderResult>;\n\tlet middleware: any = {};\n\tlet properties: any = {};\n\tlet children: any = [];\n\tlet customDiffs: [string, Function][] = [];\n\tlet customDiffNames: string[] = [];\n\tlet childInstructions = new Map<string, ChildInstruction>();\n\tlet propertyInstructions: PropertyInstruction[] = [];\n\tlet mockMiddleware = options.middleware || [];\n\n\tif (isWidgetFunction(wNode.widgetConstructor)) {\n\t\twidget = wNode.widgetConstructor;\n\n\t\tconst resolveMiddleware = (middlewares: any, mocks: any[]) => {\n\t\t\tconst keys = Object.keys(middlewares);\n\t\t\tconst results: any = {};\n\t\t\tconst uniqueId = uuid();\n\t\t\tconst mockMiddlewareMap = new Map(mocks);\n\n\t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\t\tlet isMock = false;\n\t\t\t\tlet middleware = middlewares[keys[i]]();\n\t\t\t\tif (mockMiddlewareMap.has(middlewares[keys[i]])) {\n\t\t\t\t\tmiddleware = mockMiddlewareMap.get(middlewares[keys[i]]);\n\t\t\t\t\tisMock = true;\n\t\t\t\t}\n\t\t\t\tconst payload: any = {\n\t\t\t\t\tid: uniqueId,\n\t\t\t\t\tproperties: () => {\n\t\t\t\t\t\treturn { ...properties };\n\t\t\t\t\t},\n\t\t\t\t\tchildren: () => {\n\t\t\t\t\t\treturn children;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif (middleware.middlewares) {\n\t\t\t\t\tconst resolvedMiddleware = resolveMiddleware(middleware.middlewares, mocks);\n\t\t\t\t\tpayload.middleware = resolvedMiddleware;\n\t\t\t\t\tresults[keys[i]] = middleware.callback(payload);\n\t\t\t\t} else {\n\t\t\t\t\tif (isMock) {\n\t\t\t\t\t\tlet result = middleware();\n\t\t\t\t\t\tconst resolvedMiddleware = resolveMiddleware(result.middlewares, mocks);\n\t\t\t\t\t\tpayload.middleware = resolvedMiddleware;\n\t\t\t\t\t\tresults[keys[i]] = result.callback(payload);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresults[keys[i]] = middleware.callback(payload);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\t\tmockMiddleware.push([\n\t\t\tinvalidator,\n\t\t\tfactory(() => () => {\n\t\t\t\tinvalidated = true;\n\t\t\t})\n\t\t]);\n\t\tmockMiddleware.push([destroy, factory(() => () => {})]);\n\t\tmockMiddleware.push([\n\t\t\tdiffProperty,\n\t\t\tfactory(() => (propName: string, propertiesOrDiff: Function, diff?: Function) => {\n\t\t\t\tconst diffFunction = diff || propertiesOrDiff;\n\t\t\t\tif (customDiffNames.indexOf(propName) === -1) {\n\t\t\t\t\tcustomDiffNames.push(propName);\n\t\t\t\t\tcustomDiffs.push([propName, diffFunction]);\n\t\t\t\t\tconst result = diffFunction({}, properties);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tproperties = { ...properties, [propName]: result };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t]);\n\t\tmiddleware = resolveMiddleware((wNode.widgetConstructor as any).middlewares, mockMiddleware);\n\t} else {\n\t\tconst widgetConstructor = wNode.widgetConstructor as Constructor<WidgetBase>;\n\t\tif (typeof widgetConstructor === 'function') {\n\t\t\twidget = new class extends widgetConstructor {\n\t\t\t\tinvalidate() {\n\t\t\t\t\tinvalidated = true;\n\t\t\t\t\tsuper.invalidate();\n\t\t\t\t}\n\t\t\t}();\n\t\t\t_tryRender();\n\t\t} else {\n\t\t\tthrow new Error('Renderer does not support registry items');\n\t\t}\n\t}\n\n\tfunction _tryRender() {\n\t\tlet render: RenderResult;\n\t\tconst wNode = renderFunc();\n\t\tif (isWidgetFunction(widget)) {\n\t\t\tfor (let i = 0; i < customDiffs.length; i++) {\n\t\t\t\tconst [name, diff] = customDiffs[i];\n\t\t\t\tconst result = diff(properties, wNode.properties);\n\t\t\t\tif (result) {\n\t\t\t\t\twNode.properties = { ...wNode.properties, [name]: result };\n\t\t\t\t}\n\t\t\t}\n\t\t\tpropertiesDiff(\n\t\t\t\tproperties,\n\t\t\t\twNode.properties,\n\t\t\t\t() => {\n\t\t\t\t\tinvalidated = true;\n\t\t\t\t},\n\t\t\t\t[...customDiffNames]\n\t\t\t);\n\t\t\tif (children.length || wNode.children.length) {\n\t\t\t\tinvalidated = true;\n\t\t\t}\n\t\t\tproperties = { ...wNode.properties };\n\t\t\tchildren = wNode.children;\n\t\t\tif (invalidated) {\n\t\t\t\trender = widget({ id: 'test', middleware, properties: () => properties, children: () => children });\n\t\t\t}\n\t\t} else {\n\t\t\twidget.__setProperties__(wNode.properties);\n\t\t\twidget.__setChildren__(wNode.children);\n\t\t\tif (invalidated) {\n\t\t\t\trender = widget.__render__();\n\t\t\t}\n\t\t}\n\t\tif (invalidated) {\n\t\t\tlet { hasDeferredProperties, nodes } = decorateNodes(render);\n\t\t\tif (hasDeferredProperties) {\n\t\t\t\tnodes = decorateNodes(render).nodes;\n\t\t\t}\n\t\t\trenderResult = nodes;\n\t\t\tinvalidated = false;\n\t\t}\n\t}\n\n\tfunction _expect(expectedRenderFunc: AssertionResult) {\n\t\tif (expectedRenderResult && propertyInstructions.length > 0) {\n\t\t\tpropertyInstructions.forEach((instruction) => {\n\t\t\t\tdecorate(renderResult, expectedRenderResult, new Map([[instruction.id, instruction]]));\n\t\t\t});\n\n\t\t\tpropertyInstructions = [];\n\t\t}\n\n\t\t_tryRender();\n\t\texpectedRenderResult = expectedRenderFunc();\n\t\texpectedRenderResult = decorateNodes(expectedRenderResult).nodes;\n\t\tdecorate(renderResult, expectedRenderResult, childInstructions);\n\t\tassertRender(renderResult, expectedRenderResult);\n\t}\n\n\treturn {\n\t\tchild(wrapped: any, params: any) {\n\t\t\tchildInstructions.set(wrapped.id, { wrapped, params, type: 'child' });\n\t\t\tinvalidated = true;\n\t\t},\n\t\tproperty(wrapped: any, key: any, ...params: any[]) {\n\t\t\tif (!expectedRenderResult) {\n\t\t\t\tthrow new Error('To use `.property` please perform an initial expect');\n\t\t\t}\n\t\t\tpropertyInstructions.push({ id: wrapped.id, wrapped, params, type: 'property', key });\n\t\t},\n\t\texpect(expectedRenderFunc: AssertionResult) {\n\t\t\treturn _expect(expectedRenderFunc);\n\t\t}\n\t};\n}\n\nexport default renderer;\n"]}